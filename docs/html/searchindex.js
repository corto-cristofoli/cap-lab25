Search.setIndex({"alltitles":{"Base library":[[22,"base-library"]],"CodeGen package":[[0,null]],"CodeGen.AllInMemAllocator module":[[1,null]],"CodeGen.BuildCFG module":[[2,null]],"CodeGen.HybridNaiveAllocator module":[[3,null]],"CodeGen.LinearizeCFG module":[[4,null]],"CodeGen.MiniCCodeGen3AVisitor module":[[5,null]],"Contents:":[[22,null]],"Control Flow Graph Intermediate representation":[[22,"control-flow-graph-intermediate-representation"]],"Indices and tables":[[22,"indices-and-tables"]],"Lib package":[[6,null]],"Lib.Allocator module":[[7,null]],"Lib.Errors module":[[8,null]],"Lib.FunctionData module":[[9,null]],"Lib.LinearCode module":[[10,null]],"Lib.Operands module":[[11,null]],"Lib.RiscV module":[[12,null]],"Lib.Statement module":[[13,null]],"Linear Intermediate representation":[[22,"linear-intermediate-representation"]],"MiniC":[[21,null]],"Module contents":[[0,"module-CodeGen"],[6,"module-Lib"],[14,"module-RegAlloc"]],"RegAlloc package":[[14,null]],"RegAlloc.EnterSSA module":[[15,null]],"RegAlloc.ExitSSA module":[[16,null]],"RegAlloc.LivenessDataFlow module":[[17,null]],"RegAlloc.LivenessSSA module":[[18,null]],"RegAlloc.SequentializeMoves module":[[19,null]],"RegAlloc.SmartAllocator module":[[20,null]],"SSA form":[[22,"ssa-form"]],"Submodules":[[0,"submodules"],[6,"submodules"],[14,"submodules"]],"Temporary allocation":[[22,"temporary-allocation"]],"Welcome to MiniC\u2019s documentation!":[[22,null]]},"docnames":["api/CodeGen","api/CodeGen.AllInMemAllocator","api/CodeGen.BuildCFG","api/CodeGen.HybridNaiveAllocator","api/CodeGen.LinearizeCFG","api/CodeGen.MiniCCodeGen3AVisitor","api/Lib","api/Lib.Allocator","api/Lib.Errors","api/Lib.FunctionData","api/Lib.LinearCode","api/Lib.Operands","api/Lib.RiscV","api/Lib.Statement","api/RegAlloc","api/RegAlloc.EnterSSA","api/RegAlloc.ExitSSA","api/RegAlloc.LivenessDataFlow","api/RegAlloc.LivenessSSA","api/RegAlloc.SequentializeMoves","api/RegAlloc.SmartAllocator","api/modules","index"],"envversion":{"sphinx":65,"sphinx.domains.c":3,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":9,"sphinx.domains.index":1,"sphinx.domains.javascript":3,"sphinx.domains.math":2,"sphinx.domains.python":4,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.viewcode":1},"filenames":["api/CodeGen.rst","api/CodeGen.AllInMemAllocator.rst","api/CodeGen.BuildCFG.rst","api/CodeGen.HybridNaiveAllocator.rst","api/CodeGen.LinearizeCFG.rst","api/CodeGen.MiniCCodeGen3AVisitor.rst","api/Lib.rst","api/Lib.Allocator.rst","api/Lib.Errors.rst","api/Lib.FunctionData.rst","api/Lib.LinearCode.rst","api/Lib.Operands.rst","api/Lib.RiscV.rst","api/Lib.Statement.rst","api/RegAlloc.rst","api/RegAlloc.EnterSSA.rst","api/RegAlloc.ExitSSA.rst","api/RegAlloc.LivenessDataFlow.rst","api/RegAlloc.LivenessSSA.rst","api/RegAlloc.SequentializeMoves.rst","api/RegAlloc.SmartAllocator.rst","api/modules.rst","index.rst"],"indexentries":{"a (in module lib.operands)":[[11,"Lib.Operands.A",false]],"a0 (in module lib.operands)":[[11,"Lib.Operands.A0",false]],"a1 (in module lib.operands)":[[11,"Lib.Operands.A1",false]],"absolutejump (class in lib.statement)":[[13,"Lib.Statement.AbsoluteJump",false]],"add() (in module lib.riscv)":[[12,"Lib.RiscV.add",false]],"add_comment (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_comment",false]],"add_comment() (lib.linearcode.linearcode method)":[[10,"Lib.LinearCode.LinearCode.add_comment",false]],"add_instruction_println_int (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_instruction_PRINTLN_INT",false]],"add_instruction_println_int() (lib.linearcode.linearcode method)":[[10,"Lib.LinearCode.LinearCode.add_instruction_PRINTLN_INT",false]],"add_statement (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_statement",false]],"add_statement() (lib.linearcode.linearcode method)":[[10,"Lib.LinearCode.LinearCode.add_statement",false]],"add_tmp() (lib.operands.temporarypool method)":[[11,"Lib.Operands.TemporaryPool.add_tmp",false]],"allinmemallocator (class in codegen.allinmemallocator)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator",false]],"allocationerror":[[8,"Lib.Errors.AllocationError",false]],"allocator (class in lib.allocator)":[[7,"Lib.Allocator.Allocator",false]],"args() (lib.statement.absolutejump method)":[[13,"Lib.Statement.AbsoluteJump.args",false]],"args() (lib.statement.conditionaljump method)":[[13,"Lib.Statement.ConditionalJump.args",false]],"args() (lib.statement.instru3a method)":[[13,"Lib.Statement.Instru3A.args",false]],"args() (lib.statement.instruction method)":[[13,"Lib.Statement.Instruction.args",false]],"build_cfg() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.build_cfg",false]],"build_interference_graph() (regalloc.smartallocator.smartallocator method)":[[20,"RegAlloc.SmartAllocator.SmartAllocator.build_interference_graph",false]],"call() (in module lib.riscv)":[[12,"Lib.RiscV.call",false]],"codegen":[[0,"module-CodeGen",false]],"codegen.allinmemallocator":[[1,"module-CodeGen.AllInMemAllocator",false]],"codegen.buildcfg":[[2,"module-CodeGen.BuildCFG",false]],"codegen.hybridnaiveallocator":[[3,"module-CodeGen.HybridNaiveAllocator",false]],"codegen.linearizecfg":[[4,"module-CodeGen.LinearizeCFG",false]],"codegen.miniccodegen3avisitor":[[5,"module-CodeGen.MiniCCodeGen3AVisitor",false]],"comment (class in lib.statement)":[[13,"Lib.Statement.Comment",false]],"comment (lib.statement.comment attribute)":[[13,"Lib.Statement.Comment.comment",false]],"cond (lib.statement.conditionaljump attribute)":[[13,"Lib.Statement.ConditionalJump.cond",false]],"condition (class in lib.operands)":[[11,"Lib.Operands.Condition",false]],"conditional_jump() (in module lib.riscv)":[[12,"Lib.RiscV.conditional_jump",false]],"conditionaljump (class in lib.statement)":[[13,"Lib.Statement.ConditionalJump",false]],"conflict_on_phis() (regalloc.livenessssa.livenessssa method)":[[18,"RegAlloc.LivenessSSA.LivenessSSA.conflict_on_phis",false]],"continue_label_stack (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.continue_label_stack",false]],"copy() (lib.operands.renamer method)":[[11,"Lib.Operands.Renamer.copy",false]],"dataflow_one_step() (regalloc.livenessdataflow.livenessdataflow method)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow.dataflow_one_step",false]],"datalocation (class in lib.operands)":[[11,"Lib.Operands.DataLocation",false]],"defined() (lib.operands.renamer method)":[[11,"Lib.Operands.Renamer.defined",false]],"defined() (lib.statement.instruction method)":[[13,"Lib.Statement.Instruction.defined",false]],"defined() (lib.statement.statement method)":[[13,"Lib.Statement.Statement.defined",false]],"div() (in module lib.riscv)":[[12,"Lib.RiscV.div",false]],"enter_ssa() (in module regalloc.enterssa)":[[15,"RegAlloc.EnterSSA.enter_ssa",false]],"exit_ssa() (in module regalloc.exitssa)":[[16,"RegAlloc.ExitSSA.exit_ssa",false]],"fdata (lib.linearcode.linearcode attribute)":[[10,"Lib.LinearCode.LinearCode.fdata",false]],"fill_liveout() (regalloc.livenessdataflow.livenessdataflow method)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow.fill_liveout",false]],"find_leaders() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.find_leaders",false]],"fp (in module lib.operands)":[[11,"Lib.Operands.FP",false]],"fresh() (lib.operands.renamer method)":[[11,"Lib.Operands.Renamer.fresh",false]],"fresh_label (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.fresh_label",false]],"fresh_label() (lib.functiondata.functiondata method)":[[9,"Lib.FunctionData.FunctionData.fresh_label",false]],"fresh_offset() (lib.functiondata.functiondata method)":[[9,"Lib.FunctionData.FunctionData.fresh_offset",false]],"fresh_tmp (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.fresh_tmp",false]],"fresh_tmp() (lib.functiondata.functiondata method)":[[9,"Lib.FunctionData.FunctionData.fresh_tmp",false]],"fresh_tmp() (lib.operands.temporarypool method)":[[11,"Lib.Operands.TemporaryPool.fresh_tmp",false]],"function (class in lib.operands)":[[11,"Lib.Operands.Function",false]],"functiondata (class in lib.functiondata)":[[9,"Lib.FunctionData.FunctionData",false]],"gather_uses() (regalloc.livenessssa.livenessssa method)":[[18,"RegAlloc.LivenessSSA.LivenessSSA.gather_uses",false]],"generate_moves_from_phis() (in module regalloc.exitssa)":[[16,"RegAlloc.ExitSSA.generate_moves_from_phis",false]],"generate_moves_from_phis_naive() (in module regalloc.exitssa)":[[16,"RegAlloc.ExitSSA.generate_moves_from_phis_naive",false]],"generate_smart_move() (in module regalloc.sequentializemoves)":[[19,"RegAlloc.SequentializeMoves.generate_smart_move",false]],"generate_xor_move() (in module regalloc.sequentializemoves)":[[19,"RegAlloc.SequentializeMoves.generate_xor_move",false]],"get_all_temps() (lib.operands.temporarypool method)":[[11,"Lib.Operands.TemporaryPool.get_all_temps",false]],"get_alloced_loc() (lib.operands.temporary method)":[[11,"Lib.Operands.Temporary.get_alloced_loc",false]],"get_alloced_loc() (lib.operands.temporarypool method)":[[11,"Lib.Operands.TemporaryPool.get_alloced_loc",false]],"get_functions() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.get_functions",false]],"get_instructions() (lib.linearcode.linearcode method)":[[10,"Lib.LinearCode.LinearCode.get_instructions",false]],"get_label_div_by_zero (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.get_label_div_by_zero",false]],"get_label_div_by_zero() (lib.functiondata.functiondata method)":[[9,"Lib.FunctionData.FunctionData.get_label_div_by_zero",false]],"get_name() (lib.functiondata.functiondata method)":[[9,"Lib.FunctionData.FunctionData.get_name",false]],"get_offset() (lib.functiondata.functiondata method)":[[9,"Lib.FunctionData.FunctionData.get_offset",false]],"get_offset() (lib.operands.offset method)":[[11,"Lib.Operands.Offset.get_offset",false]],"gp (in module lib.operands)":[[11,"Lib.Operands.GP",false]],"gp_regs (in module lib.operands)":[[11,"Lib.Operands.GP_REGS",false]],"hybridnaiveallocator (class in codegen.hybridnaiveallocator)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator",false]],"immediate (class in lib.operands)":[[11,"Lib.Operands.Immediate",false]],"ins (lib.statement.absolutejump attribute)":[[13,"Lib.Statement.AbsoluteJump.ins",false]],"ins (lib.statement.instruction attribute)":[[13,"Lib.Statement.Instruction.ins",false]],"insertphis() (in module regalloc.enterssa)":[[15,"RegAlloc.EnterSSA.insertPhis",false]],"instru3a (class in lib.statement)":[[13,"Lib.Statement.Instru3A",false]],"instruction (class in lib.statement)":[[13,"Lib.Statement.Instruction",false]],"is_read_only() (lib.statement.instruction method)":[[13,"Lib.Statement.Instruction.is_read_only",false]],"iter_statements() (lib.linearcode.linearcode method)":[[10,"Lib.LinearCode.LinearCode.iter_statements",false]],"jump() (in module lib.riscv)":[[12,"Lib.RiscV.jump",false]],"label (class in lib.statement)":[[13,"Lib.Statement.Label",false]],"label (lib.statement.absolutejump attribute)":[[13,"Lib.Statement.AbsoluteJump.label",false]],"label (lib.statement.conditionaljump attribute)":[[13,"Lib.Statement.ConditionalJump.label",false]],"land() (in module lib.riscv)":[[12,"Lib.RiscV.land",false]],"ld() (in module lib.riscv)":[[12,"Lib.RiscV.ld",false]],"li() (in module lib.riscv)":[[12,"Lib.RiscV.li",false]],"lib":[[6,"module-Lib",false]],"lib.allocator":[[7,"module-Lib.Allocator",false]],"lib.errors":[[8,"module-Lib.Errors",false]],"lib.functiondata":[[9,"module-Lib.FunctionData",false]],"lib.linearcode":[[10,"module-Lib.LinearCode",false]],"lib.operands":[[11,"module-Lib.Operands",false]],"lib.riscv":[[12,"module-Lib.RiscV",false]],"lib.statement":[[13,"module-Lib.Statement",false]],"linearcode (class in lib.linearcode)":[[10,"Lib.LinearCode.LinearCode",false]],"linearize() (in module codegen.linearizecfg)":[[4,"CodeGen.LinearizeCFG.linearize",false]],"livein_at_instruction() (regalloc.livenessssa.livenessssa method)":[[18,"RegAlloc.LivenessSSA.LivenessSSA.livein_at_instruction",false]],"livenessdataflow (class in regalloc.livenessdataflow)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow",false]],"livenessssa (class in regalloc.livenessssa)":[[18,"RegAlloc.LivenessSSA.LivenessSSA",false]],"liveout_at_block() (regalloc.livenessssa.livenessssa method)":[[18,"RegAlloc.LivenessSSA.LivenessSSA.liveout_at_block",false]],"liveout_at_instruction() (regalloc.livenessssa.livenessssa method)":[[18,"RegAlloc.LivenessSSA.LivenessSSA.liveout_at_instruction",false]],"lor() (in module lib.riscv)":[[12,"Lib.RiscV.lor",false]],"miniccodegen3avisitor (class in codegen.miniccodegen3avisitor)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor",false]],"minicinternalerror":[[8,"Lib.Errors.MiniCInternalError",false]],"minicruntimeerror":[[8,"Lib.Errors.MiniCRuntimeError",false]],"minictypeerror":[[8,"Lib.Errors.MiniCTypeError",false]],"minicunsupportederror":[[8,"Lib.Errors.MiniCUnsupportedError",false]],"module":[[0,"module-CodeGen",false],[1,"module-CodeGen.AllInMemAllocator",false],[2,"module-CodeGen.BuildCFG",false],[3,"module-CodeGen.HybridNaiveAllocator",false],[4,"module-CodeGen.LinearizeCFG",false],[5,"module-CodeGen.MiniCCodeGen3AVisitor",false],[6,"module-Lib",false],[7,"module-Lib.Allocator",false],[8,"module-Lib.Errors",false],[9,"module-Lib.FunctionData",false],[10,"module-Lib.LinearCode",false],[11,"module-Lib.Operands",false],[12,"module-Lib.RiscV",false],[13,"module-Lib.Statement",false],[14,"module-RegAlloc",false],[15,"module-RegAlloc.EnterSSA",false],[16,"module-RegAlloc.ExitSSA",false],[17,"module-RegAlloc.LivenessDataFlow",false],[18,"module-RegAlloc.LivenessSSA",false],[19,"module-RegAlloc.SequentializeMoves",false],[20,"module-RegAlloc.SmartAllocator",false]],"mul() (in module lib.riscv)":[[12,"Lib.RiscV.mul",false]],"mv() (in module lib.riscv)":[[12,"Lib.RiscV.mv",false]],"naiveallocator (class in lib.allocator)":[[7,"Lib.Allocator.NaiveAllocator",false]],"name (lib.statement.label attribute)":[[13,"Lib.Statement.Label.name",false]],"negate() (lib.operands.condition method)":[[11,"Lib.Operands.Condition.negate",false]],"offset (class in lib.operands)":[[11,"Lib.Operands.Offset",false]],"op1 (lib.statement.conditionaljump attribute)":[[13,"Lib.Statement.ConditionalJump.op1",false]],"op2 (lib.statement.conditionaljump attribute)":[[13,"Lib.Statement.ConditionalJump.op2",false]],"operand (class in lib.operands)":[[11,"Lib.Operands.Operand",false]],"ordered_blocks_list() (in module codegen.linearizecfg)":[[4,"CodeGen.LinearizeCFG.ordered_blocks_list",false]],"prepare() (codegen.allinmemallocator.allinmemallocator method)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator.prepare",false]],"prepare() (codegen.hybridnaiveallocator.hybridnaiveallocator method)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator.prepare",false]],"prepare() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.prepare",false]],"prepare() (lib.allocator.naiveallocator method)":[[7,"Lib.Allocator.NaiveAllocator.prepare",false]],"prepare() (regalloc.smartallocator.smartallocator method)":[[20,"RegAlloc.SmartAllocator.SmartAllocator.prepare",false]],"prepare_chunk() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.prepare_chunk",false]],"print_code() (lib.linearcode.linearcode method)":[[10,"Lib.LinearCode.LinearCode.print_code",false]],"print_dot() (lib.linearcode.linearcode method)":[[10,"Lib.LinearCode.LinearCode.print_dot",false]],"print_gen_kill() (regalloc.livenessdataflow.livenessdataflow method)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow.print_gen_kill",false]],"print_map_in_out() (regalloc.livenessdataflow.livenessdataflow method)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow.print_map_in_out",false]],"print_map_in_out() (regalloc.livenessssa.livenessssa method)":[[18,"RegAlloc.LivenessSSA.LivenessSSA.print_map_in_out",false]],"printins() (lib.statement.comment method)":[[13,"Lib.Statement.Comment.printIns",false]],"printins() (lib.statement.instruction method)":[[13,"Lib.Statement.Instruction.printIns",false]],"printins() (lib.statement.label method)":[[13,"Lib.Statement.Label.printIns",false]],"printins() (lib.statement.statement method)":[[13,"Lib.Statement.Statement.printIns",false]],"printsymboltable() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.printSymbolTable",false]],"ra (in module lib.operands)":[[11,"Lib.Operands.RA",false]],"regalloc":[[14,"module-RegAlloc",false]],"regalloc.enterssa":[[15,"module-RegAlloc.EnterSSA",false]],"regalloc.exitssa":[[16,"module-RegAlloc.ExitSSA",false]],"regalloc.livenessdataflow":[[17,"module-RegAlloc.LivenessDataFlow",false]],"regalloc.livenessssa":[[18,"module-RegAlloc.LivenessSSA",false]],"regalloc.sequentializemoves":[[19,"module-RegAlloc.SequentializeMoves",false]],"regalloc.smartallocator":[[20,"module-RegAlloc.SmartAllocator",false]],"register (class in lib.operands)":[[11,"Lib.Operands.Register",false]],"registerlike (class in lib.operands)":[[11,"Lib.Operands.RegisterLike",false]],"regset_to_string() (in module lib.statement)":[[13,"Lib.Statement.regset_to_string",false]],"rem() (in module lib.riscv)":[[12,"Lib.RiscV.rem",false]],"rename() (lib.statement.absolutejump method)":[[13,"Lib.Statement.AbsoluteJump.rename",false]],"rename() (lib.statement.conditionaljump method)":[[13,"Lib.Statement.ConditionalJump.rename",false]],"rename() (lib.statement.instru3a method)":[[13,"Lib.Statement.Instru3A.rename",false]],"rename() (lib.statement.instruction method)":[[13,"Lib.Statement.Instruction.rename",false]],"rename_block() (in module regalloc.enterssa)":[[15,"RegAlloc.EnterSSA.rename_block",false]],"rename_variables() (in module regalloc.enterssa)":[[15,"RegAlloc.EnterSSA.rename_variables",false]],"renamer (class in lib.operands)":[[11,"Lib.Operands.Renamer",false]],"replace() (codegen.allinmemallocator.allinmemallocator method)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator.replace",false]],"replace() (codegen.hybridnaiveallocator.hybridnaiveallocator method)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator.replace",false]],"replace() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.replace",false]],"replace() (lib.allocator.naiveallocator method)":[[7,"Lib.Allocator.NaiveAllocator.replace",false]],"replace() (lib.operands.renamer method)":[[11,"Lib.Operands.Renamer.replace",false]],"replace() (regalloc.smartallocator.smartallocator method)":[[20,"RegAlloc.SmartAllocator.SmartAllocator.replace",false]],"restore_regs() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.restore_regs",false]],"rewritecode() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.rewriteCode",false]],"run() (regalloc.livenessdataflow.livenessdataflow method)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow.run",false]],"run() (regalloc.livenessssa.livenessssa method)":[[18,"RegAlloc.LivenessSSA.LivenessSSA.run",false]],"run_dataflow_analysis() (regalloc.livenessdataflow.livenessdataflow method)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow.run_dataflow_analysis",false]],"s (in module lib.operands)":[[11,"Lib.Operands.S",false]],"save_regs() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.save_regs",false]],"sd() (in module lib.riscv)":[[12,"Lib.RiscV.sd",false]],"separate_with_leaders() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.separate_with_leaders",false]],"sequentialize_moves() (in module regalloc.sequentializemoves)":[[19,"RegAlloc.SequentializeMoves.sequentialize_moves",false]],"set_gen_kill() (regalloc.livenessdataflow.livenessdataflow method)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow.set_gen_kill",false]],"set_gen_kill_in_block() (regalloc.livenessdataflow.livenessdataflow method)":[[17,"RegAlloc.LivenessDataFlow.LivenessDataFlow.set_gen_kill_in_block",false]],"set_temp_allocation() (lib.operands.temporarypool method)":[[11,"Lib.Operands.TemporaryPool.set_temp_allocation",false]],"smart_alloc() (regalloc.smartallocator.smartallocator method)":[[20,"RegAlloc.SmartAllocator.SmartAllocator.smart_alloc",false]],"smartallocator (class in regalloc.smartallocator)":[[20,"RegAlloc.SmartAllocator.SmartAllocator",false]],"sp (in module lib.operands)":[[11,"Lib.Operands.SP",false]],"statement (class in lib.statement)":[[13,"Lib.Statement.Statement",false]],"sub() (in module lib.riscv)":[[12,"Lib.RiscV.sub",false]],"substitute() (lib.statement.absolutejump method)":[[13,"Lib.Statement.AbsoluteJump.substitute",false]],"substitute() (lib.statement.conditionaljump method)":[[13,"Lib.Statement.ConditionalJump.substitute",false]],"substitute() (lib.statement.instru3a method)":[[13,"Lib.Statement.Instru3A.substitute",false]],"substitute() (lib.statement.statement method)":[[13,"Lib.Statement.Statement.substitute",false]],"t (in module lib.operands)":[[11,"Lib.Operands.T",false]],"targets() (lib.statement.absolutejump method)":[[13,"Lib.Statement.AbsoluteJump.targets",false]],"temporary (class in lib.operands)":[[11,"Lib.Operands.Temporary",false]],"temporarypool (class in lib.operands)":[[11,"Lib.Operands.TemporaryPool",false]],"tp (in module lib.operands)":[[11,"Lib.Operands.TP",false]],"used() (lib.statement.instruction method)":[[13,"Lib.Statement.Instruction.used",false]],"used() (lib.statement.statement method)":[[13,"Lib.Statement.Statement.used",false]],"visitadditiveexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAdditiveExpr",false]],"visitandexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAndExpr",false]],"visitarrayallocexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayAllocExpr",false]],"visitarrayreadexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayReadExpr",false]],"visitarraytype() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayType",false]],"visitarraywritestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayWriteStat",false]],"visitassignstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAssignStat",false]],"visitatomexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAtomExpr",false]],"visitbooleanatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitBooleanAtom",false]],"visitcontinuestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitContinueStat",false]],"visitequalityexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitEqualityExpr",false]],"visitexprlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitExprList",false]],"visitexprlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitExprListBase",false]],"visitfloatatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFloatAtom",false]],"visitforcstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitForCStat",false]],"visitforforstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitForForStat",false]],"visitfunccall() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFuncCall",false]],"visitfuncdef() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFuncDef",false]],"visitidatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdAtom",false]],"visitidlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdList",false]],"visitidlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdListBase",false]],"visitifstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIfStat",false]],"visitintatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIntAtom",false]],"visitmultiplicativeexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitMultiplicativeExpr",false]],"visitnotexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitNotExpr",false]],"visitorexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitOrExpr",false]],"visitparamdecl() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamDecl",false]],"visitparamlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamList",false]],"visitparamlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamListBase",false]],"visitparexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParExpr",false]],"visitprintlnboolstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnboolStat",false]],"visitprintlnfloatstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnfloatStat",false]],"visitprintlnintstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnintStat",false]],"visitprintlnstringstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnstringStat",false]],"visitprogrule() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitProgRule",false]],"visitrelationalexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitRelationalExpr",false]],"visitstatlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitStatList",false]],"visitstringatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitStringAtom",false]],"visitunaryminusexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitUnaryMinusExpr",false]],"visitvardecl() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitVarDecl",false]],"visitwhilestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitWhileStat",false]],"with_args() (lib.statement.absolutejump method)":[[13,"Lib.Statement.AbsoluteJump.with_args",false]],"with_args() (lib.statement.conditionaljump method)":[[13,"Lib.Statement.ConditionalJump.with_args",false]],"with_args() (lib.statement.instru3a method)":[[13,"Lib.Statement.Instru3A.with_args",false]],"with_args() (lib.statement.statement method)":[[13,"Lib.Statement.Statement.with_args",false]],"xor() (in module lib.riscv)":[[12,"Lib.RiscV.xor",false]],"zero (in module lib.operands)":[[11,"Lib.Operands.ZERO",false]]},"objects":{"":[[0,0,0,"-","CodeGen"],[6,0,0,"-","Lib"],[14,0,0,"-","RegAlloc"]],"CodeGen":[[1,0,0,"-","AllInMemAllocator"],[2,0,0,"-","BuildCFG"],[3,0,0,"-","HybridNaiveAllocator"],[4,0,0,"-","LinearizeCFG"],[5,0,0,"-","MiniCCodeGen3AVisitor"]],"CodeGen.AllInMemAllocator":[[1,1,1,"","AllInMemAllocator"]],"CodeGen.AllInMemAllocator.AllInMemAllocator":[[1,2,1,"","prepare"],[1,2,1,"","replace"]],"CodeGen.BuildCFG":[[2,3,1,"","build_cfg"],[2,3,1,"","find_leaders"],[2,3,1,"","prepare_chunk"],[2,3,1,"","separate_with_leaders"]],"CodeGen.HybridNaiveAllocator":[[3,1,1,"","HybridNaiveAllocator"]],"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator":[[3,2,1,"","prepare"],[3,2,1,"","replace"]],"CodeGen.LinearizeCFG":[[4,3,1,"","linearize"],[4,3,1,"","ordered_blocks_list"]],"CodeGen.MiniCCodeGen3AVisitor":[[5,1,1,"","MiniCCodeGen3AVisitor"]],"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor":[[5,4,1,"","add_comment"],[5,4,1,"","add_instruction_PRINTLN_INT"],[5,4,1,"","add_statement"],[5,4,1,"","continue_label_stack"],[5,4,1,"","fresh_label"],[5,4,1,"","fresh_tmp"],[5,2,1,"","get_functions"],[5,4,1,"","get_label_div_by_zero"],[5,2,1,"","printSymbolTable"],[5,2,1,"","restore_regs"],[5,2,1,"","save_regs"],[5,2,1,"","visitAdditiveExpr"],[5,2,1,"","visitAndExpr"],[5,2,1,"","visitArrayAllocExpr"],[5,2,1,"","visitArrayReadExpr"],[5,2,1,"","visitArrayType"],[5,2,1,"","visitArrayWriteStat"],[5,2,1,"","visitAssignStat"],[5,2,1,"","visitAtomExpr"],[5,2,1,"","visitBooleanAtom"],[5,2,1,"","visitContinueStat"],[5,2,1,"","visitEqualityExpr"],[5,2,1,"","visitExprList"],[5,2,1,"","visitExprListBase"],[5,2,1,"","visitFloatAtom"],[5,2,1,"","visitForCStat"],[5,2,1,"","visitForForStat"],[5,2,1,"","visitFuncCall"],[5,2,1,"","visitFuncDef"],[5,2,1,"","visitIdAtom"],[5,2,1,"","visitIdList"],[5,2,1,"","visitIdListBase"],[5,2,1,"","visitIfStat"],[5,2,1,"","visitIntAtom"],[5,2,1,"","visitMultiplicativeExpr"],[5,2,1,"","visitNotExpr"],[5,2,1,"","visitOrExpr"],[5,2,1,"","visitParExpr"],[5,2,1,"","visitParamDecl"],[5,2,1,"","visitParamList"],[5,2,1,"","visitParamListBase"],[5,2,1,"","visitPrintlnboolStat"],[5,2,1,"","visitPrintlnfloatStat"],[5,2,1,"","visitPrintlnintStat"],[5,2,1,"","visitPrintlnstringStat"],[5,2,1,"","visitProgRule"],[5,2,1,"","visitRelationalExpr"],[5,2,1,"","visitStatList"],[5,2,1,"","visitStringAtom"],[5,2,1,"","visitUnaryMinusExpr"],[5,2,1,"","visitVarDecl"],[5,2,1,"","visitWhileStat"]],"Lib":[[7,0,0,"-","Allocator"],[8,0,0,"-","Errors"],[9,0,0,"-","FunctionData"],[10,0,0,"-","LinearCode"],[11,0,0,"-","Operands"],[12,0,0,"-","RiscV"],[13,0,0,"-","Statement"]],"Lib.Allocator":[[7,1,1,"","Allocator"],[7,1,1,"","NaiveAllocator"]],"Lib.Allocator.Allocator":[[7,2,1,"","prepare"],[7,2,1,"","replace"],[7,2,1,"","rewriteCode"]],"Lib.Allocator.NaiveAllocator":[[7,2,1,"","prepare"],[7,2,1,"","replace"]],"Lib.Errors":[[8,5,1,"","AllocationError"],[8,5,1,"","MiniCInternalError"],[8,5,1,"","MiniCRuntimeError"],[8,5,1,"","MiniCTypeError"],[8,5,1,"","MiniCUnsupportedError"]],"Lib.FunctionData":[[9,1,1,"","FunctionData"]],"Lib.FunctionData.FunctionData":[[9,2,1,"","fresh_label"],[9,2,1,"","fresh_offset"],[9,2,1,"","fresh_tmp"],[9,2,1,"","get_label_div_by_zero"],[9,2,1,"","get_name"],[9,2,1,"","get_offset"]],"Lib.LinearCode":[[10,1,1,"","LinearCode"]],"Lib.LinearCode.LinearCode":[[10,2,1,"","add_comment"],[10,2,1,"","add_instruction_PRINTLN_INT"],[10,2,1,"","add_statement"],[10,4,1,"","fdata"],[10,2,1,"","get_instructions"],[10,2,1,"","iter_statements"],[10,2,1,"","print_code"],[10,2,1,"","print_dot"]],"Lib.Operands":[[11,6,1,"","A"],[11,6,1,"","A0"],[11,6,1,"","A1"],[11,1,1,"","Condition"],[11,1,1,"","DataLocation"],[11,6,1,"","FP"],[11,1,1,"","Function"],[11,6,1,"","GP"],[11,6,1,"","GP_REGS"],[11,1,1,"","Immediate"],[11,1,1,"","Offset"],[11,1,1,"","Operand"],[11,6,1,"","RA"],[11,1,1,"","Register"],[11,1,1,"","RegisterLike"],[11,1,1,"","Renamer"],[11,6,1,"","S"],[11,6,1,"","SP"],[11,6,1,"","T"],[11,6,1,"","TP"],[11,1,1,"","Temporary"],[11,1,1,"","TemporaryPool"],[11,6,1,"","ZERO"]],"Lib.Operands.Condition":[[11,2,1,"","negate"]],"Lib.Operands.Offset":[[11,2,1,"","get_offset"]],"Lib.Operands.Renamer":[[11,2,1,"","copy"],[11,2,1,"","defined"],[11,2,1,"","fresh"],[11,2,1,"","replace"]],"Lib.Operands.Temporary":[[11,2,1,"","get_alloced_loc"]],"Lib.Operands.TemporaryPool":[[11,2,1,"","add_tmp"],[11,2,1,"","fresh_tmp"],[11,2,1,"","get_all_temps"],[11,2,1,"","get_alloced_loc"],[11,2,1,"","set_temp_allocation"]],"Lib.RiscV":[[12,3,1,"","add"],[12,3,1,"","call"],[12,3,1,"","conditional_jump"],[12,3,1,"","div"],[12,3,1,"","jump"],[12,3,1,"","land"],[12,3,1,"","ld"],[12,3,1,"","li"],[12,3,1,"","lor"],[12,3,1,"","mul"],[12,3,1,"","mv"],[12,3,1,"","rem"],[12,3,1,"","sd"],[12,3,1,"","sub"],[12,3,1,"","xor"]],"Lib.Statement":[[13,1,1,"","AbsoluteJump"],[13,1,1,"","Comment"],[13,1,1,"","ConditionalJump"],[13,1,1,"","Instru3A"],[13,1,1,"","Instruction"],[13,1,1,"","Label"],[13,1,1,"","Statement"],[13,3,1,"","regset_to_string"]],"Lib.Statement.AbsoluteJump":[[13,2,1,"","args"],[13,4,1,"","ins"],[13,4,1,"","label"],[13,2,1,"","rename"],[13,2,1,"","substitute"],[13,2,1,"","targets"],[13,2,1,"","with_args"]],"Lib.Statement.Comment":[[13,4,1,"","comment"],[13,2,1,"","printIns"]],"Lib.Statement.ConditionalJump":[[13,2,1,"","args"],[13,4,1,"","cond"],[13,4,1,"","label"],[13,4,1,"","op1"],[13,4,1,"","op2"],[13,2,1,"","rename"],[13,2,1,"","substitute"],[13,2,1,"","with_args"]],"Lib.Statement.Instru3A":[[13,2,1,"","args"],[13,2,1,"","rename"],[13,2,1,"","substitute"],[13,2,1,"","with_args"]],"Lib.Statement.Instruction":[[13,2,1,"","args"],[13,2,1,"","defined"],[13,4,1,"","ins"],[13,2,1,"","is_read_only"],[13,2,1,"","printIns"],[13,2,1,"","rename"],[13,2,1,"","used"]],"Lib.Statement.Label":[[13,4,1,"","name"],[13,2,1,"","printIns"]],"Lib.Statement.Statement":[[13,2,1,"","defined"],[13,2,1,"","printIns"],[13,2,1,"","substitute"],[13,2,1,"","used"],[13,2,1,"","with_args"]],"RegAlloc":[[15,0,0,"-","EnterSSA"],[16,0,0,"-","ExitSSA"],[17,0,0,"-","LivenessDataFlow"],[18,0,0,"-","LivenessSSA"],[19,0,0,"-","SequentializeMoves"],[20,0,0,"-","SmartAllocator"]],"RegAlloc.EnterSSA":[[15,3,1,"","enter_ssa"],[15,3,1,"","insertPhis"],[15,3,1,"","rename_block"],[15,3,1,"","rename_variables"]],"RegAlloc.ExitSSA":[[16,3,1,"","exit_ssa"],[16,3,1,"","generate_moves_from_phis"],[16,3,1,"","generate_moves_from_phis_naive"]],"RegAlloc.LivenessDataFlow":[[17,1,1,"","LivenessDataFlow"]],"RegAlloc.LivenessDataFlow.LivenessDataFlow":[[17,2,1,"","dataflow_one_step"],[17,2,1,"","fill_liveout"],[17,2,1,"","print_gen_kill"],[17,2,1,"","print_map_in_out"],[17,2,1,"","run"],[17,2,1,"","run_dataflow_analysis"],[17,2,1,"","set_gen_kill"],[17,2,1,"","set_gen_kill_in_block"]],"RegAlloc.LivenessSSA":[[18,1,1,"","LivenessSSA"]],"RegAlloc.LivenessSSA.LivenessSSA":[[18,2,1,"","conflict_on_phis"],[18,2,1,"","gather_uses"],[18,2,1,"","livein_at_instruction"],[18,2,1,"","liveout_at_block"],[18,2,1,"","liveout_at_instruction"],[18,2,1,"","print_map_in_out"],[18,2,1,"","run"]],"RegAlloc.SequentializeMoves":[[19,3,1,"","generate_smart_move"],[19,3,1,"","generate_xor_move"],[19,3,1,"","sequentialize_moves"]],"RegAlloc.SmartAllocator":[[20,1,1,"","SmartAllocator"]],"RegAlloc.SmartAllocator.SmartAllocator":[[20,2,1,"","build_interference_graph"],[20,2,1,"","prepare"],[20,2,1,"","replace"],[20,2,1,"","smart_alloc"]]},"objnames":{"0":["py","module","Python module"],"1":["py","class","Python class"],"2":["py","method","Python method"],"3":["py","function","Python function"],"4":["py","attribute","Python attribute"],"5":["py","exception","Python exception"],"6":["py","data","Python data"]},"objtypes":{"0":"py:module","1":"py:class","2":"py:method","3":"py:function","4":"py:attribute","5":"py:exception","6":"py:data"},"terms":{"":[6,10,11,21],"0":[2,11],"1":2,"3":[13,22],"4a":22,"5b":16,"A":[6,11,13,21,22],"And":12,"At":[15,22],"For":10,"If":2,"In":13,"It":[11,13],"OR":[3,20],"Or":12,"The":[7,10,11,13,22],"Then":7,"These":22,"_blockin":17,"_blockout":17,"_debug_graph":20,"_gen":17,"_igraph":20,"_kill":17,"_liveout":18,"_name":2,"_seen":18,"a0":[6,11,21,22],"a1":[6,11,21,22],"a2":11,"a3":11,"a4":11,"a5":11,"a6":11,"a7":11,"about":22,"absolut":13,"absolutejump":[2,5,6,10,12,13,21,22],"accordingli":15,"actual":[1,3,7,11,20],"ad":9,"add":[2,6,7,10,11,12,21,22],"add_com":[0,5,6,10,22],"add_instruction_println_int":[0,5,6,10,22],"add_stat":[0,5,6,10,22],"add_tmp":[6,11,22],"address":[11,13,22],"after":7,"aka":12,"all":[1,3,7,11,20,22],"all_op":11,"allinmem":[3,7],"allinmemalloc":[0,21],"alloc":[1,3,6,10,11,16,19,20,21],"allocationerror":[6,8,21,22],"allow":[10,11,22],"also":[10,11],"an":[2,7,10,11,13,15,16,18,19,20],"analysi":[17,18,20],"anoth":18,"api":[10,12,22],"appear":[13,22],"ar":[7,9,11,13,18,19,20,22],"arg":[6,13,22],"argument":[11,22],"around":12,"asm":13,"assembli":22,"assign":7,"associ":20,"auxiliari":15,"b":15,"backward":18,"base":[1,3,5,7,8,9,10,11,13,17,18,20],"basenam":[15,20],"basereg":11,"basic":22,"been":[11,13,20],"befor":[1,3,7,22],"begin":18,"beq":[11,12],"between":[2,16,20],"bge":12,"bgt":12,"block":[2,4,15,16,17,18,22],"blockin":17,"blockout":17,"bool":[11,16],"both":13,"branch":[11,13],"build":[10,11,16,20],"build_cfg":[0,2,21],"build_interference_graph":[14,20],"buildcfg":[0,21],"built":20,"c":12,"call":[6,7,10,11,12,13,15,16,19,21,22],"callabl":5,"can":[1,3,11],"cannot":12,"cap":[2,4,10,12,15,16,19],"cfg":[2,4,15,16,18,19,22],"check":11,"class":[1,3,5,7,9,10,11,13,17,18,20,22],"clone":13,"code":[2,7,10,12,22],"codegen":[10,21],"codegener":[2,4,10,12],"color":20,"comment":[2,5,6,10,13,16,19,21,22],"common":9,"comparison":11,"complet":10,"comput":[4,11,15,17,18,20],"concret":7,"cond":[6,12,13,22],"condit":[6,11,12,13,21,22],"conditional_jump":[6,12,21,22],"conditionaljump":[2,5,6,10,11,12,13,21,22],"conflict":[18,20],"conflict_on_phi":[14,18],"consid":13,"constant":11,"construct":[2,20],"constructor":11,"contain":[2,9,10],"content":21,"continue_label_stack":[0,5],"control":4,"convert":[15,16,19],"copi":[6,11,22],"correspond":[1,3,7,19,20],"cours":11,"creat":22,"ctx":5,"current":9,"cycl":19,"data":[7,11,22],"dataflow":[17,20],"dataflow_one_step":[14,17],"dataloc":[5,6,10,11,19,21,22],"debug":[5,10,17,18,20],"debug_graph":20,"decreas":9,"defin":[6,7,9,11,12,13,18,22],"depend":19,"dest":19,"destin":[13,19],"df":[10,15],"dict":[11,13,15,18],"dictionnari":18,"differ":[9,11],"directli":22,"div":[6,12,21,22],"div_by_zero":9,"do":2,"dom_graph":15,"domin":[15,22],"done":7,"dr":12,"dt":15,"due":12,"dure":[15,16,19],"e":[11,17],"each":[7,10,17,18,20,22],"easili":22,"edg":20,"edit":22,"either":11,"element":2,"elimin":[15,16,19],"empti":2,"enabl":16,"end":[2,18,22],"enforc":11,"ensur":18,"enter_ssa":[14,15,21],"enterssa":[14,21],"entri":15,"eq":12,"equal":11,"error":[2,6,21,22],"exampl":11,"except":8,"exclud":2,"exist":20,"exit":[16,19],"exit_ssa":[14,16,21],"exitssa":[14,21],"expand":[1,3,10],"expect":11,"extract":2,"f":10,"fail":7,"fals":[10,15,17,18,20],"fdata":[1,2,3,6,7,9,10,20,22],"field":17,"file":[7,9,10,11],"filenam":10,"fill":18,"fill_liveout":[14,17],"final":15,"find":2,"find_lead":[0,2,21],"first":[2,3,7,13],"fixpoint":17,"flow":4,"folder":22,"form":[15,16,18,19],"fp":[6,9,11,21,22],"frame":11,"fresh":[2,6,9,11,22],"fresh_label":[0,2,5,6,9,22],"fresh_offset":[6,9,22],"fresh_tmp":[0,5,6,9,11,22],"from":[2,7,11,13,15,17],"frontier":[15,22],"function":[6,9,10,11,12,13,15,16,17,19,21,22],"functiondata":[1,2,3,6,7,10,20,21,22],"gather_us":[14,18],"gener":[7,10,11,19],"generate_moves_from_phi":[14,16,21],"generate_moves_from_phis_na":[14,16,21],"generate_smart_mov":[14,19,21],"generate_xor_mov":[14,19,21],"get":[11,17],"get_all_temp":[6,11,22],"get_alloced_loc":[6,11,22],"get_funct":[0,5],"get_instruct":[6,10,22],"get_label_div_by_zero":[0,5,6,9,22],"get_nam":[6,9,22],"get_offset":[6,9,11,22],"give":[11,18,22],"given":[2,4,9,10,13],"gp":[6,11,21,22],"gp_reg":[6,11,21,22],"graph":[4,10,15,20],"group":18,"gt":11,"ha":11,"handl":7,"have":[13,15,20,22],"helper":[15,16,19],"hybridnaivealloc":[0,21],"i":[2,7,9,10,11,12,13,15,16,17,18,19,20],"identifi":18,"iff":20,"imm7":12,"immedi":[6,11,12,21,22],"implement":[7,22],"includ":2,"inde":11,"index":22,"indic":[2,15],"indirectli":9,"individu":17,"inform":[10,17,18],"inherit":13,"ins":[6,13,22],"insert":[15,16],"insertphi":[14,15,21],"insid":[17,18],"instanc":[2,10],"instead":[2,22],"instrs_chunk":2,"instru3a":[2,5,6,10,12,13,16,19,21,22],"instruct":[1,2,3,4,6,7,10,12,13,16,17,18,19,20,21,22],"int":[2,5,9,11,18],"integ":[10,11],"interfer":20,"intermedi":9,"intro":[15,16,19],"invari":[1,3],"is_read_onli":[6,13,22],"is_smart":16,"iter":[7,10,17],"iter_stat":[6,7,10,22],"its":[11,13,18,22],"itself":11,"j":13,"jump":[2,6,12,13,21,22],"kei":[11,13],"kind":[13,22],"lab":[16,22],"label":[2,5,6,9,10,12,13,21,22],"land":[6,12,21,22],"last":[2,18],"later":11,"latter":18,"ld":[6,12,21,22],"leader":2,"len":2,"li":[6,12,21,22],"lib":[21,22],"like":[3,12,15],"lincod":2,"linear":[0,2,4,10,21],"linearcod":[2,5,6,7,9,21,22],"linearizecfg":[0,21],"list":[1,2,3,4,5,7,10,11,13,16,19,20,22],"listcod":7,"live":[17,18,20],"livein_at_instruct":[14,18],"livenessdataflow":[14,21],"livenessssa":[14,21],"liveout_at_block":[14,18],"liveout_at_instruct":[14,18],"liveset":17,"load":19,"locat":[1,3,7,11,13,19,20],"look":15,"lor":[6,12,21,22],"lower":11,"lt":11,"make":22,"manag":11,"mani":7,"map":[7,11],"meant":17,"mem":12,"member":10,"memori":[1,3,7,9,11,19,20,22],"meta":10,"metadata":9,"method":11,"mif08":12,"miniccodegen3avisitor":[0,21],"minicinternalerror":[6,8,21,22],"minicpars":[11,12],"minicruntimeerror":[6,8,21,22],"minictypeerror":[6,8,21,22],"minicunsupportederror":[6,8,21,22],"minicvisitor":5,"model":22,"modifi":7,"modul":[21,22],"modulo":12,"more":7,"move":[16,19],"mul":[6,12,21,22],"must":[11,20],"mv":[6,12,21,22],"naiv":[3,7,22],"naivealloc":[6,7,21,22],"name":[6,9,10,11,13,15,22],"na\u00efv":7,"need":[15,22],"negat":[6,11,22],"never":13,"new":[9,10,11,13,16],"new_arg":13,"newlin":10,"node":[15,16,22],"non":[13,22],"none":[1,2,3,5,7,10,11,13,15,16,17,18,20],"number":11,"object":[7,9,10,11,13,17,18,22],"offset":[3,5,6,9,11,20,21,22],"often":22,"old_instr":[1,3,7,20],"one":[11,13,17,18],"onli":13,"op1":[6,12,13,22],"op2":[6,12,13,22],"opdict":11,"oper":11,"operand":[1,3,6,7,9,12,13,19,20,21,22],"opposit":11,"optim":4,"optimis":[15,16,19],"optyp":11,"order":[4,7],"ordered_blocks_list":[0,4,21],"orient":22,"origin":7,"other":[11,13],"otherwis":13,"out":[16,17,18,19],"output":[10,13],"over":[7,10],"packag":21,"page":22,"pair":19,"parallel":19,"parallel_mov":19,"parent":16,"parser":5,"partit":2,"path":10,"perform":20,"phi":[15,16,18,22],"phinod":[16,22],"physic":[3,11,20],"place":11,"po":18,"point":[15,22],"pointer":11,"pool":[9,11],"posit":[2,18],"possibli":7,"potenti":2,"pre_chunk":2,"precondit":20,"prepar":[0,1,3,6,7,14,20,22],"preparatori":20,"prepare_chunk":[0,2,21],"present":22,"pretti":13,"previous":7,"print":[10,13,15,17,18,20],"print_cod":[6,10,22],"print_dot":[6,10,22],"print_gen_kil":[14,17],"print_map_in_out":[14,17,18],"printin":[6,13,22],"printsymbolt":[0,5],"produc":15,"prog":15,"program":10,"propag":[17,18],"pseudo":22,"purpos":[10,11],"python":[12,22],"r1":19,"r2":19,"ra":[6,11,21,22],"rais":2,"rang":20,"read":13,"real":10,"reg":10,"regalloc":21,"regist":[3,6,7,11,16,19,20,21,22],"registerlik":[6,11,12,13,21,22],"registerset":13,"regset":5,"regset_to_str":[6,13,21,22],"regular":13,"rel":9,"relat":20,"relev":10,"rem":[6,12,21,22],"remaind":12,"renam":[6,11,13,15,21,22],"rename_block":[14,15,21],"rename_vari":[14,15,21],"repeatedli":10,"replac":[0,1,3,6,7,10,11,13,14,16,20,22],"repres":[19,22],"represent":[9,10],"respect":[2,19],"respons":7,"rest":2,"restore_reg":[0,5],"return":[2,7,9,10,11,13,18,19],"rewritecod":[6,7,22],"risc":22,"riscv":[6,9,10,11,13,19,21,22],"run":[14,17,18],"run_dataflow_analysi":[14,17],"s1":[3,11],"s10":11,"s11":11,"s2":[1,3,11,19],"s3":[1,3,11],"s4":11,"s5":11,"s6":11,"s7":11,"s8":11,"s9":11,"save":11,"save_reg":[0,5],"sd":[6,12,21,22],"search":22,"see":10,"self":[17,18,20],"separate_with_lead":[0,2,21],"sequenti":19,"sequentialize_mov":[14,19,21],"sequentializemov":[14,21],"set":[13,15,16,17,18,19],"set_gen_kil":[14,17],"set_gen_kill_in_block":[14,17],"set_temp_alloc":[6,7,11,22],"shall":11,"shortcut":11,"should":[7,13,22],"smart":[7,16,19,20],"smart_alloc":[14,20],"smartalloc":[14,21],"some":[7,9,10,22],"sourc":[1,2,3,4,5,7,8,9,10,11,12,13,15,16,17,18,19,20,22],"sp":[6,11,21,22],"special":22,"specif":13,"sr":12,"sr1":12,"sr2orimm7":12,"src":19,"ssa":[15,16,18,19],"stack":9,"standard":22,"start":2,"statement":[2,4,6,11,18,21,22],"step":[7,20],"store":[1,3,7,9,19],"str":[5,9,10,11,13,20],"stream":13,"string":[9,11],"sub":[6,12,21,22],"subclass":11,"submodul":21,"subst":13,"substitut":[6,13,22],"swap":19,"t":[6,11,21,22],"t0":11,"t1":11,"t2":11,"t3":11,"t4":11,"t5":11,"t6":11,"take":[13,19,22],"target":[6,13,22],"temp_0":15,"temp_n":15,"temp_x":15,"temporari":[1,3,5,6,7,9,10,11,18,19,20,21],"temporarypool":[6,7,9,11,21,22],"termin":[18,22],"text":10,"than":[7,11],"thank":2,"thei":[7,20],"them":[2,22],"thi":[2,7,9,11,12,13,15,16,17,19],"those":22,"through":9,"tmp":19,"too":7,"tp":[6,11,21,22],"transform":[7,15],"translat":22,"transpar":7,"true":[11,13,16,20],"try":7,"tstatement":13,"tupl":[2,5,18,19],"turn":13,"two":[7,19],"type":11,"typic":11,"uncondit":12,"under":18,"understand":22,"uniqu":9,"until":17,"us":[1,2,3,6,9,11,13,15,17,18,19,22],"usabl":11,"usag":11,"usual":9,"util":[9,10,13],"v":22,"val":11,"valu":[1,3,10,11,13],"var":18,"variabl":[9,10,15,18],"variou":22,"veri":22,"vertic":20,"via":20,"view":10,"visitadditiveexpr":[0,5],"visitandexpr":[0,5],"visitarrayallocexpr":[0,5],"visitarrayreadexpr":[0,5],"visitarraytyp":[0,5],"visitarraywritestat":[0,5],"visitassignstat":[0,5],"visitatomexpr":[0,5],"visitbooleanatom":[0,5],"visitcontinuestat":[0,5],"visitequalityexpr":[0,5],"visitexprlist":[0,5],"visitexprlistbas":[0,5],"visitfloatatom":[0,5],"visitforcstat":[0,5],"visitforforstat":[0,5],"visitfunccal":[0,5],"visitfuncdef":[0,5],"visitidatom":[0,5],"visitidlist":[0,5],"visitidlistbas":[0,5],"visitifstat":[0,5],"visitintatom":[0,5],"visitmultiplicativeexpr":[0,5],"visitnotexpr":[0,5],"visitor":10,"visitorexpr":[0,5],"visitparamdecl":[0,5],"visitparamlist":[0,5],"visitparamlistbas":[0,5],"visitparexpr":[0,5],"visitprintlnboolstat":[0,5],"visitprintlnfloatstat":[0,5],"visitprintlnintstat":[0,5],"visitprintlnstringstat":[0,5],"visitprogrul":[0,5],"visitrelationalexpr":[0,5],"visitstatlist":[0,5],"visitstringatom":[0,5],"visitunaryminusexpr":[0,5],"visitvardecl":[0,5],"visitwhilestat":[0,5],"we":[9,11,15,22],"well":9,"when":16,"where":[7,11,13,15],"whether":19,"which":[9,11,13,19],"while":18,"whose":2,"with_arg":[6,13,22],"without":19,"won":22,"work":[9,22],"wrapper":12,"written":13,"xor":[6,12,19,21,22],"yet":11,"you":22,"zero":[6,11,21,22],"\u03c6":[15,18]},"titles":["CodeGen package","CodeGen.AllInMemAllocator module","CodeGen.BuildCFG module","CodeGen.HybridNaiveAllocator module","CodeGen.LinearizeCFG module","CodeGen.MiniCCodeGen3AVisitor module","Lib package","Lib.Allocator module","Lib.Errors module","Lib.FunctionData module","Lib.LinearCode module","Lib.Operands module","Lib.RiscV module","Lib.Statement module","RegAlloc package","RegAlloc.EnterSSA module","RegAlloc.ExitSSA module","RegAlloc.LivenessDataFlow module","RegAlloc.LivenessSSA module","RegAlloc.SequentializeMoves module","RegAlloc.SmartAllocator module","MiniC","Welcome to MiniC\u2019s documentation!"],"titleterms":{"":22,"allinmemalloc":1,"alloc":[7,22],"base":22,"buildcfg":2,"codegen":[0,1,2,3,4,5],"content":[0,6,14,22],"control":22,"document":22,"enterssa":15,"error":8,"exitssa":16,"flow":22,"form":22,"functiondata":9,"graph":22,"hybridnaivealloc":3,"indic":22,"intermedi":22,"lib":[6,7,8,9,10,11,12,13],"librari":22,"linear":22,"linearcod":10,"linearizecfg":4,"livenessdataflow":17,"livenessssa":18,"minic":[21,22],"miniccodegen3avisitor":5,"modul":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],"operand":11,"packag":[0,6,14],"regalloc":[14,15,16,17,18,19,20],"represent":22,"riscv":12,"sequentializemov":19,"smartalloc":20,"ssa":22,"statement":13,"submodul":[0,6,14],"tabl":22,"temporari":22,"welcom":22}})