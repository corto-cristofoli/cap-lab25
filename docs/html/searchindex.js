Search.setIndex({"alltitles":{"Base library":[[27,"base-library"]],"CodeGen package":[[0,null]],"CodeGen.AllInMemAllocator module":[[1,null]],"CodeGen.BuildCFG module":[[2,null]],"CodeGen.HybridNaiveAllocator module":[[3,null]],"CodeGen.LinearizeCFG module":[[4,null]],"CodeGen.MiniCCodeGen3AVisitor module":[[5,null]],"Contents:":[[27,null]],"Control Flow Graph Intermediate representation":[[27,"control-flow-graph-intermediate-representation"]],"Indices and tables":[[27,"indices-and-tables"]],"Lib package":[[6,null]],"Lib.Allocator module":[[7,null]],"Lib.CFG module":[[8,null]],"Lib.Dominators module":[[9,null]],"Lib.Errors module":[[10,null]],"Lib.FunctionData module":[[11,null]],"Lib.Graphes module":[[12,null]],"Lib.LinearCode module":[[13,null]],"Lib.Operands module":[[14,null]],"Lib.PhiNode module":[[15,null]],"Lib.RiscV module":[[16,null]],"Lib.Statement module":[[17,null]],"Lib.Terminator module":[[18,null]],"Linear Intermediate representation":[[27,"linear-intermediate-representation"]],"MiniC":[[26,null]],"Module contents":[[0,"module-CodeGen"],[6,"module-Lib"],[19,"module-RegAlloc"]],"RegAlloc package":[[19,null]],"RegAlloc.EnterSSA module":[[20,null]],"RegAlloc.ExitSSA module":[[21,null]],"RegAlloc.LivenessDataFlow module":[[22,null]],"RegAlloc.LivenessSSA module":[[23,null]],"RegAlloc.SequentializeMoves module":[[24,null]],"RegAlloc.SmartAllocator module":[[25,null]],"SSA form":[[27,"ssa-form"]],"Submodules":[[0,"submodules"],[6,"submodules"],[19,"submodules"]],"Temporary allocation":[[27,"temporary-allocation"]],"Welcome to MiniC\u2019s documentation!":[[27,null]]},"docnames":["api/CodeGen","api/CodeGen.AllInMemAllocator","api/CodeGen.BuildCFG","api/CodeGen.HybridNaiveAllocator","api/CodeGen.LinearizeCFG","api/CodeGen.MiniCCodeGen3AVisitor","api/Lib","api/Lib.Allocator","api/Lib.CFG","api/Lib.Dominators","api/Lib.Errors","api/Lib.FunctionData","api/Lib.Graphes","api/Lib.LinearCode","api/Lib.Operands","api/Lib.PhiNode","api/Lib.RiscV","api/Lib.Statement","api/Lib.Terminator","api/RegAlloc","api/RegAlloc.EnterSSA","api/RegAlloc.ExitSSA","api/RegAlloc.LivenessDataFlow","api/RegAlloc.LivenessSSA","api/RegAlloc.SequentializeMoves","api/RegAlloc.SmartAllocator","api/modules","index"],"envversion":{"sphinx":65,"sphinx.domains.c":3,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":9,"sphinx.domains.index":1,"sphinx.domains.javascript":3,"sphinx.domains.math":2,"sphinx.domains.python":4,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.viewcode":1},"filenames":["api/CodeGen.rst","api/CodeGen.AllInMemAllocator.rst","api/CodeGen.BuildCFG.rst","api/CodeGen.HybridNaiveAllocator.rst","api/CodeGen.LinearizeCFG.rst","api/CodeGen.MiniCCodeGen3AVisitor.rst","api/Lib.rst","api/Lib.Allocator.rst","api/Lib.CFG.rst","api/Lib.Dominators.rst","api/Lib.Errors.rst","api/Lib.FunctionData.rst","api/Lib.Graphes.rst","api/Lib.LinearCode.rst","api/Lib.Operands.rst","api/Lib.PhiNode.rst","api/Lib.RiscV.rst","api/Lib.Statement.rst","api/Lib.Terminator.rst","api/RegAlloc.rst","api/RegAlloc.EnterSSA.rst","api/RegAlloc.ExitSSA.rst","api/RegAlloc.LivenessDataFlow.rst","api/RegAlloc.LivenessSSA.rst","api/RegAlloc.SequentializeMoves.rst","api/RegAlloc.SmartAllocator.rst","api/modules.rst","index.rst"],"indexentries":{"a (in module lib.operands)":[[14,"Lib.Operands.A",false]],"a0 (in module lib.operands)":[[14,"Lib.Operands.A0",false]],"a1 (in module lib.operands)":[[14,"Lib.Operands.A1",false]],"absolutejump (class in lib.statement)":[[17,"Lib.Statement.AbsoluteJump",false]],"add() (in module lib.riscv)":[[16,"Lib.RiscV.add",false]],"add_block() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.add_block",false]],"add_comment (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_comment",false]],"add_comment() (lib.linearcode.linearcode method)":[[13,"Lib.LinearCode.LinearCode.add_comment",false]],"add_edge() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.add_edge",false]],"add_edge() (lib.graphes.digraph method)":[[12,"Lib.Graphes.DiGraph.add_edge",false]],"add_edge() (lib.graphes.graph method)":[[12,"Lib.Graphes.Graph.add_edge",false]],"add_instruction() (lib.cfg.block method)":[[8,"Lib.CFG.Block.add_instruction",false]],"add_instruction_println_int (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_instruction_PRINTLN_INT",false]],"add_instruction_println_int() (lib.linearcode.linearcode method)":[[13,"Lib.LinearCode.LinearCode.add_instruction_PRINTLN_INT",false]],"add_phi() (lib.cfg.block method)":[[8,"Lib.CFG.Block.add_phi",false]],"add_statement (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_statement",false]],"add_statement() (lib.linearcode.linearcode method)":[[13,"Lib.LinearCode.LinearCode.add_statement",false]],"add_tmp() (lib.operands.temporarypool method)":[[14,"Lib.Operands.TemporaryPool.add_tmp",false]],"add_vertex() (lib.graphes.generalgraph method)":[[12,"Lib.Graphes.GeneralGraph.add_vertex",false]],"allinmemallocator (class in codegen.allinmemallocator)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator",false]],"allocationerror":[[10,"Lib.Errors.AllocationError",false]],"allocator (class in lib.allocator)":[[7,"Lib.Allocator.Allocator",false]],"args() (lib.statement.absolutejump method)":[[17,"Lib.Statement.AbsoluteJump.args",false]],"args() (lib.statement.conditionaljump method)":[[17,"Lib.Statement.ConditionalJump.args",false]],"args() (lib.statement.instru3a method)":[[17,"Lib.Statement.Instru3A.args",false]],"args() (lib.statement.instruction method)":[[17,"Lib.Statement.Instruction.args",false]],"args() (lib.terminator.branchingterminator method)":[[18,"Lib.Terminator.BranchingTerminator.args",false]],"args() (lib.terminator.return method)":[[18,"Lib.Terminator.Return.args",false]],"bfs_traversal() (lib.graphes.generalgraph method)":[[12,"Lib.Graphes.GeneralGraph.bfs_traversal",false]],"block (class in lib.cfg)":[[8,"Lib.CFG.Block",false]],"branchingterminator (class in lib.terminator)":[[18,"Lib.Terminator.BranchingTerminator",false]],"build_cfg() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.build_cfg",false]],"build_interference_graph() (regalloc.smartallocator.smartallocator method)":[[25,"RegAlloc.SmartAllocator.SmartAllocator.build_interference_graph",false]],"call() (in module lib.riscv)":[[16,"Lib.RiscV.call",false]],"cfg (class in lib.cfg)":[[8,"Lib.CFG.CFG",false]],"codegen":[[0,"module-CodeGen",false]],"codegen.allinmemallocator":[[1,"module-CodeGen.AllInMemAllocator",false]],"codegen.buildcfg":[[2,"module-CodeGen.BuildCFG",false]],"codegen.hybridnaiveallocator":[[3,"module-CodeGen.HybridNaiveAllocator",false]],"codegen.linearizecfg":[[4,"module-CodeGen.LinearizeCFG",false]],"codegen.miniccodegen3avisitor":[[5,"module-CodeGen.MiniCCodeGen3AVisitor",false]],"color() (lib.graphes.graph method)":[[12,"Lib.Graphes.Graph.color",false]],"color_with_k_colors() (lib.graphes.graph method)":[[12,"Lib.Graphes.Graph.color_with_k_colors",false]],"comment (class in lib.statement)":[[17,"Lib.Statement.Comment",false]],"comment (lib.statement.comment attribute)":[[17,"Lib.Statement.Comment.comment",false]],"computedf() (in module lib.dominators)":[[9,"Lib.Dominators.computeDF",false]],"computedom() (in module lib.dominators)":[[9,"Lib.Dominators.computeDom",false]],"computedt() (in module lib.dominators)":[[9,"Lib.Dominators.computeDT",false]],"cond (lib.statement.conditionaljump attribute)":[[17,"Lib.Statement.ConditionalJump.cond",false]],"cond (lib.terminator.branchingterminator attribute)":[[18,"Lib.Terminator.BranchingTerminator.cond",false]],"condition (class in lib.operands)":[[14,"Lib.Operands.Condition",false]],"conditional_jump() (in module lib.riscv)":[[16,"Lib.RiscV.conditional_jump",false]],"conditionaljump (class in lib.statement)":[[17,"Lib.Statement.ConditionalJump",false]],"conflict_on_phis() (regalloc.livenessssa.livenessssa method)":[[23,"RegAlloc.LivenessSSA.LivenessSSA.conflict_on_phis",false]],"connected_components() (lib.graphes.generalgraph method)":[[12,"Lib.Graphes.GeneralGraph.connected_components",false]],"continue_label_stack (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.continue_label_stack",false]],"copy() (lib.operands.renamer method)":[[14,"Lib.Operands.Renamer.copy",false]],"dataflow_one_step() (regalloc.livenessdataflow.livenessdataflow method)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow.dataflow_one_step",false]],"datalocation (class in lib.operands)":[[14,"Lib.Operands.DataLocation",false]],"defined() (lib.operands.renamer method)":[[14,"Lib.Operands.Renamer.defined",false]],"defined() (lib.phinode.phinode method)":[[15,"Lib.PhiNode.PhiNode.defined",false]],"defined() (lib.statement.instruction method)":[[17,"Lib.Statement.Instruction.defined",false]],"defined() (lib.statement.statement method)":[[17,"Lib.Statement.Statement.defined",false]],"delete_edge() (lib.graphes.digraph method)":[[12,"Lib.Graphes.DiGraph.delete_edge",false]],"delete_edge() (lib.graphes.graph method)":[[12,"Lib.Graphes.Graph.delete_edge",false]],"delete_vertex() (lib.graphes.digraph method)":[[12,"Lib.Graphes.DiGraph.delete_vertex",false]],"delete_vertex() (lib.graphes.graph method)":[[12,"Lib.Graphes.Graph.delete_vertex",false]],"dfs_traversal() (lib.graphes.generalgraph method)":[[12,"Lib.Graphes.GeneralGraph.dfs_traversal",false]],"digraph (class in lib.graphes)":[[12,"Lib.Graphes.DiGraph",false]],"div() (in module lib.riscv)":[[16,"Lib.RiscV.div",false]],"edges() (lib.graphes.digraph method)":[[12,"Lib.Graphes.DiGraph.edges",false]],"edges() (lib.graphes.generalgraph method)":[[12,"Lib.Graphes.GeneralGraph.edges",false]],"edges() (lib.graphes.graph method)":[[12,"Lib.Graphes.Graph.edges",false]],"enter_ssa() (in module regalloc.enterssa)":[[20,"RegAlloc.EnterSSA.enter_ssa",false]],"exit_ssa() (in module regalloc.exitssa)":[[21,"RegAlloc.ExitSSA.exit_ssa",false]],"fdata (lib.cfg.cfg attribute)":[[8,"Lib.CFG.CFG.fdata",false]],"fdata (lib.linearcode.linearcode attribute)":[[13,"Lib.LinearCode.LinearCode.fdata",false]],"fill_liveout() (regalloc.livenessdataflow.livenessdataflow method)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow.fill_liveout",false]],"find_leaders() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.find_leaders",false]],"fp (in module lib.operands)":[[14,"Lib.Operands.FP",false]],"fresh() (lib.operands.renamer method)":[[14,"Lib.Operands.Renamer.fresh",false]],"fresh_label (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.fresh_label",false]],"fresh_label() (lib.functiondata.functiondata method)":[[11,"Lib.FunctionData.FunctionData.fresh_label",false]],"fresh_offset() (lib.functiondata.functiondata method)":[[11,"Lib.FunctionData.FunctionData.fresh_offset",false]],"fresh_tmp (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.fresh_tmp",false]],"fresh_tmp() (lib.functiondata.functiondata method)":[[11,"Lib.FunctionData.FunctionData.fresh_tmp",false]],"fresh_tmp() (lib.operands.temporarypool method)":[[14,"Lib.Operands.TemporaryPool.fresh_tmp",false]],"function (class in lib.operands)":[[14,"Lib.Operands.Function",false]],"functiondata (class in lib.functiondata)":[[11,"Lib.FunctionData.FunctionData",false]],"gather_defs() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.gather_defs",false]],"gather_uses() (regalloc.livenessssa.livenessssa method)":[[23,"RegAlloc.LivenessSSA.LivenessSSA.gather_uses",false]],"generalgraph (class in lib.graphes)":[[12,"Lib.Graphes.GeneralGraph",false]],"generate_moves_from_phis() (in module regalloc.exitssa)":[[21,"RegAlloc.ExitSSA.generate_moves_from_phis",false]],"generate_moves_from_phis_naive() (in module regalloc.exitssa)":[[21,"RegAlloc.ExitSSA.generate_moves_from_phis_naive",false]],"generate_smart_move() (in module regalloc.sequentializemoves)":[[24,"RegAlloc.SequentializeMoves.generate_smart_move",false]],"generate_xor_move() (in module regalloc.sequentializemoves)":[[24,"RegAlloc.SequentializeMoves.generate_xor_move",false]],"get_all_statements() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_all_statements",false]],"get_all_temps() (lib.operands.temporarypool method)":[[14,"Lib.Operands.TemporaryPool.get_all_temps",false]],"get_alloced_loc() (lib.operands.temporary method)":[[14,"Lib.Operands.Temporary.get_alloced_loc",false]],"get_alloced_loc() (lib.operands.temporarypool method)":[[14,"Lib.Operands.TemporaryPool.get_alloced_loc",false]],"get_block() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_block",false]],"get_blocks() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_blocks",false]],"get_body() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_body",false]],"get_body_and_terminator() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_body_and_terminator",false]],"get_end() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_end",false]],"get_entries() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_entries",false]],"get_functions() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.get_functions",false]],"get_in() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_in",false]],"get_instructions() (lib.linearcode.linearcode method)":[[13,"Lib.LinearCode.LinearCode.get_instructions",false]],"get_label() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_label",false]],"get_label_div_by_zero (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.get_label_div_by_zero",false]],"get_label_div_by_zero() (lib.functiondata.functiondata method)":[[11,"Lib.FunctionData.FunctionData.get_label_div_by_zero",false]],"get_name() (lib.functiondata.functiondata method)":[[11,"Lib.FunctionData.FunctionData.get_name",false]],"get_offset() (lib.functiondata.functiondata method)":[[11,"Lib.FunctionData.FunctionData.get_offset",false]],"get_offset() (lib.operands.offset method)":[[14,"Lib.Operands.Offset.get_offset",false]],"get_phis() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_phis",false]],"get_srcs() (lib.phinode.phinode method)":[[15,"Lib.PhiNode.PhiNode.get_srcs",false]],"get_start() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_start",false]],"get_terminator() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_terminator",false]],"gp (in module lib.operands)":[[14,"Lib.Operands.GP",false]],"gp_regs (in module lib.operands)":[[14,"Lib.Operands.GP_REGS",false]],"graph (class in lib.graphes)":[[12,"Lib.Graphes.Graph",false]],"graph_dict (lib.graphes.generalgraph attribute)":[[12,"Lib.Graphes.GeneralGraph.graph_dict",false]],"grapherror":[[12,"Lib.Graphes.GraphError",false]],"hybridnaiveallocator (class in codegen.hybridnaiveallocator)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator",false]],"immediate (class in lib.operands)":[[14,"Lib.Operands.Immediate",false]],"ins (lib.statement.absolutejump attribute)":[[17,"Lib.Statement.AbsoluteJump.ins",false]],"ins (lib.statement.instruction attribute)":[[17,"Lib.Statement.Instruction.ins",false]],"insertphis() (in module regalloc.enterssa)":[[20,"RegAlloc.EnterSSA.insertPhis",false]],"instru3a (class in lib.statement)":[[17,"Lib.Statement.Instru3A",false]],"instruction (class in lib.statement)":[[17,"Lib.Statement.Instruction",false]],"is_reachable_from() (lib.graphes.generalgraph method)":[[12,"Lib.Graphes.GeneralGraph.is_reachable_from",false]],"is_read_only() (lib.statement.instruction method)":[[17,"Lib.Statement.Instruction.is_read_only",false]],"is_read_only() (lib.terminator.return method)":[[18,"Lib.Terminator.Return.is_read_only",false]],"iter_statements() (lib.cfg.block method)":[[8,"Lib.CFG.Block.iter_statements",false]],"iter_statements() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.iter_statements",false]],"iter_statements() (lib.linearcode.linearcode method)":[[13,"Lib.LinearCode.LinearCode.iter_statements",false]],"jump() (in module lib.riscv)":[[16,"Lib.RiscV.jump",false]],"jump2terminator() (in module lib.terminator)":[[18,"Lib.Terminator.jump2terminator",false]],"label (class in lib.statement)":[[17,"Lib.Statement.Label",false]],"label (lib.statement.absolutejump attribute)":[[17,"Lib.Statement.AbsoluteJump.label",false]],"label (lib.statement.conditionaljump attribute)":[[17,"Lib.Statement.ConditionalJump.label",false]],"label_else (lib.terminator.branchingterminator attribute)":[[18,"Lib.Terminator.BranchingTerminator.label_else",false]],"label_then (lib.terminator.branchingterminator attribute)":[[18,"Lib.Terminator.BranchingTerminator.label_then",false]],"land() (in module lib.riscv)":[[16,"Lib.RiscV.land",false]],"ld() (in module lib.riscv)":[[16,"Lib.RiscV.ld",false]],"li() (in module lib.riscv)":[[16,"Lib.RiscV.li",false]],"lib":[[6,"module-Lib",false]],"lib.allocator":[[7,"module-Lib.Allocator",false]],"lib.cfg":[[8,"module-Lib.CFG",false]],"lib.dominators":[[9,"module-Lib.Dominators",false]],"lib.errors":[[10,"module-Lib.Errors",false]],"lib.functiondata":[[11,"module-Lib.FunctionData",false]],"lib.graphes":[[12,"module-Lib.Graphes",false]],"lib.linearcode":[[13,"module-Lib.LinearCode",false]],"lib.operands":[[14,"module-Lib.Operands",false]],"lib.phinode":[[15,"module-Lib.PhiNode",false]],"lib.riscv":[[16,"module-Lib.RiscV",false]],"lib.statement":[[17,"module-Lib.Statement",false]],"lib.terminator":[[18,"module-Lib.Terminator",false]],"linearcode (class in lib.linearcode)":[[13,"Lib.LinearCode.LinearCode",false]],"linearize() (in module codegen.linearizecfg)":[[4,"CodeGen.LinearizeCFG.linearize",false]],"linearize_naive() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.linearize_naive",false]],"livein_at_instruction() (regalloc.livenessssa.livenessssa method)":[[23,"RegAlloc.LivenessSSA.LivenessSSA.livein_at_instruction",false]],"livenessdataflow (class in regalloc.livenessdataflow)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow",false]],"livenessssa (class in regalloc.livenessssa)":[[23,"RegAlloc.LivenessSSA.LivenessSSA",false]],"liveout_at_block() (regalloc.livenessssa.livenessssa method)":[[23,"RegAlloc.LivenessSSA.LivenessSSA.liveout_at_block",false]],"liveout_at_instruction() (regalloc.livenessssa.livenessssa method)":[[23,"RegAlloc.LivenessSSA.LivenessSSA.liveout_at_instruction",false]],"lor() (in module lib.riscv)":[[16,"Lib.RiscV.lor",false]],"message (lib.graphes.grapherror attribute)":[[12,"Lib.Graphes.GraphError.message",false]],"miniccodegen3avisitor (class in codegen.miniccodegen3avisitor)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor",false]],"minicinternalerror":[[10,"Lib.Errors.MiniCInternalError",false]],"minicruntimeerror":[[10,"Lib.Errors.MiniCRuntimeError",false]],"minictypeerror":[[10,"Lib.Errors.MiniCTypeError",false]],"minicunsupportederror":[[10,"Lib.Errors.MiniCUnsupportedError",false]],"module":[[0,"module-CodeGen",false],[1,"module-CodeGen.AllInMemAllocator",false],[2,"module-CodeGen.BuildCFG",false],[3,"module-CodeGen.HybridNaiveAllocator",false],[4,"module-CodeGen.LinearizeCFG",false],[5,"module-CodeGen.MiniCCodeGen3AVisitor",false],[6,"module-Lib",false],[7,"module-Lib.Allocator",false],[8,"module-Lib.CFG",false],[9,"module-Lib.Dominators",false],[10,"module-Lib.Errors",false],[11,"module-Lib.FunctionData",false],[12,"module-Lib.Graphes",false],[13,"module-Lib.LinearCode",false],[14,"module-Lib.Operands",false],[15,"module-Lib.PhiNode",false],[16,"module-Lib.RiscV",false],[17,"module-Lib.Statement",false],[18,"module-Lib.Terminator",false],[19,"module-RegAlloc",false],[20,"module-RegAlloc.EnterSSA",false],[21,"module-RegAlloc.ExitSSA",false],[22,"module-RegAlloc.LivenessDataFlow",false],[23,"module-RegAlloc.LivenessSSA",false],[24,"module-RegAlloc.SequentializeMoves",false],[25,"module-RegAlloc.SmartAllocator",false]],"mul() (in module lib.riscv)":[[16,"Lib.RiscV.mul",false]],"mv() (in module lib.riscv)":[[16,"Lib.RiscV.mv",false]],"naiveallocator (class in lib.allocator)":[[7,"Lib.Allocator.NaiveAllocator",false]],"name (lib.statement.label attribute)":[[17,"Lib.Statement.Label.name",false]],"negate() (lib.operands.condition method)":[[14,"Lib.Operands.Condition.negate",false]],"neighbourhoods() (lib.graphes.digraph method)":[[12,"Lib.Graphes.DiGraph.neighbourhoods",false]],"offset (class in lib.operands)":[[14,"Lib.Operands.Offset",false]],"op1 (lib.statement.conditionaljump attribute)":[[17,"Lib.Statement.ConditionalJump.op1",false]],"op1 (lib.terminator.branchingterminator attribute)":[[18,"Lib.Terminator.BranchingTerminator.op1",false]],"op2 (lib.statement.conditionaljump attribute)":[[17,"Lib.Statement.ConditionalJump.op2",false]],"op2 (lib.terminator.branchingterminator attribute)":[[18,"Lib.Terminator.BranchingTerminator.op2",false]],"operand (class in lib.operands)":[[14,"Lib.Operands.Operand",false]],"ordered_blocks_list() (in module codegen.linearizecfg)":[[4,"CodeGen.LinearizeCFG.ordered_blocks_list",false]],"out_blocks() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.out_blocks",false]],"phinode (class in lib.phinode)":[[15,"Lib.PhiNode.PhiNode",false]],"pred() (lib.graphes.digraph method)":[[12,"Lib.Graphes.DiGraph.pred",false]],"prepare() (codegen.allinmemallocator.allinmemallocator method)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator.prepare",false]],"prepare() (codegen.hybridnaiveallocator.hybridnaiveallocator method)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator.prepare",false]],"prepare() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.prepare",false]],"prepare() (lib.allocator.naiveallocator method)":[[7,"Lib.Allocator.NaiveAllocator.prepare",false]],"prepare() (regalloc.smartallocator.smartallocator method)":[[25,"RegAlloc.SmartAllocator.SmartAllocator.prepare",false]],"prepare_chunk() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.prepare_chunk",false]],"print_code() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.print_code",false]],"print_code() (lib.linearcode.linearcode method)":[[13,"Lib.LinearCode.LinearCode.print_code",false]],"print_dot() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.print_dot",false]],"print_dot() (lib.graphes.digraph method)":[[12,"Lib.Graphes.DiGraph.print_dot",false]],"print_dot() (lib.graphes.graph method)":[[12,"Lib.Graphes.Graph.print_dot",false]],"print_dot() (lib.linearcode.linearcode method)":[[13,"Lib.LinearCode.LinearCode.print_dot",false]],"print_gen_kill() (regalloc.livenessdataflow.livenessdataflow method)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow.print_gen_kill",false]],"print_map_in_out() (regalloc.livenessdataflow.livenessdataflow method)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow.print_map_in_out",false]],"print_map_in_out() (regalloc.livenessssa.livenessssa method)":[[23,"RegAlloc.LivenessSSA.LivenessSSA.print_map_in_out",false]],"printdt() (in module lib.dominators)":[[9,"Lib.Dominators.printDT",false]],"printins() (lib.phinode.phinode method)":[[15,"Lib.PhiNode.PhiNode.printIns",false]],"printins() (lib.statement.comment method)":[[17,"Lib.Statement.Comment.printIns",false]],"printins() (lib.statement.instruction method)":[[17,"Lib.Statement.Instruction.printIns",false]],"printins() (lib.statement.label method)":[[17,"Lib.Statement.Label.printIns",false]],"printins() (lib.statement.statement method)":[[17,"Lib.Statement.Statement.printIns",false]],"printins() (lib.terminator.return method)":[[18,"Lib.Terminator.Return.printIns",false]],"printsymboltable() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.printSymbolTable",false]],"ra (in module lib.operands)":[[14,"Lib.Operands.RA",false]],"regalloc":[[19,"module-RegAlloc",false]],"regalloc.enterssa":[[20,"module-RegAlloc.EnterSSA",false]],"regalloc.exitssa":[[21,"module-RegAlloc.ExitSSA",false]],"regalloc.livenessdataflow":[[22,"module-RegAlloc.LivenessDataFlow",false]],"regalloc.livenessssa":[[23,"module-RegAlloc.LivenessSSA",false]],"regalloc.sequentializemoves":[[24,"module-RegAlloc.SequentializeMoves",false]],"regalloc.smartallocator":[[25,"module-RegAlloc.SmartAllocator",false]],"register (class in lib.operands)":[[14,"Lib.Operands.Register",false]],"registerlike (class in lib.operands)":[[14,"Lib.Operands.RegisterLike",false]],"regset_to_string() (in module lib.statement)":[[17,"Lib.Statement.regset_to_string",false]],"rem() (in module lib.riscv)":[[16,"Lib.RiscV.rem",false]],"remove_all_phis() (lib.cfg.block method)":[[8,"Lib.CFG.Block.remove_all_phis",false]],"remove_edge() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.remove_edge",false]],"rename() (lib.phinode.phinode method)":[[15,"Lib.PhiNode.PhiNode.rename",false]],"rename() (lib.statement.absolutejump method)":[[17,"Lib.Statement.AbsoluteJump.rename",false]],"rename() (lib.statement.conditionaljump method)":[[17,"Lib.Statement.ConditionalJump.rename",false]],"rename() (lib.statement.instru3a method)":[[17,"Lib.Statement.Instru3A.rename",false]],"rename() (lib.statement.instruction method)":[[17,"Lib.Statement.Instruction.rename",false]],"rename() (lib.terminator.branchingterminator method)":[[18,"Lib.Terminator.BranchingTerminator.rename",false]],"rename() (lib.terminator.return method)":[[18,"Lib.Terminator.Return.rename",false]],"rename_block() (in module regalloc.enterssa)":[[20,"RegAlloc.EnterSSA.rename_block",false]],"rename_from() (lib.phinode.phinode method)":[[15,"Lib.PhiNode.PhiNode.rename_from",false]],"rename_variables() (in module regalloc.enterssa)":[[20,"RegAlloc.EnterSSA.rename_variables",false]],"renamer (class in lib.operands)":[[14,"Lib.Operands.Renamer",false]],"replace() (codegen.allinmemallocator.allinmemallocator method)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator.replace",false]],"replace() (codegen.hybridnaiveallocator.hybridnaiveallocator method)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator.replace",false]],"replace() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.replace",false]],"replace() (lib.allocator.naiveallocator method)":[[7,"Lib.Allocator.NaiveAllocator.replace",false]],"replace() (lib.operands.renamer method)":[[14,"Lib.Operands.Renamer.replace",false]],"replace() (regalloc.smartallocator.smartallocator method)":[[25,"RegAlloc.SmartAllocator.SmartAllocator.replace",false]],"restore_regs() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.restore_regs",false]],"return (class in lib.terminator)":[[18,"Lib.Terminator.Return",false]],"rewritecode() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.rewriteCode",false]],"run() (regalloc.livenessdataflow.livenessdataflow method)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow.run",false]],"run() (regalloc.livenessssa.livenessssa method)":[[23,"RegAlloc.LivenessSSA.LivenessSSA.run",false]],"run_dataflow_analysis() (regalloc.livenessdataflow.livenessdataflow method)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow.run_dataflow_analysis",false]],"s (in module lib.operands)":[[14,"Lib.Operands.S",false]],"save_regs() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.save_regs",false]],"sd() (in module lib.riscv)":[[16,"Lib.RiscV.sd",false]],"separate_with_leaders() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.separate_with_leaders",false]],"sequentialize_moves() (in module regalloc.sequentializemoves)":[[24,"RegAlloc.SequentializeMoves.sequentialize_moves",false]],"set_gen_kill() (regalloc.livenessdataflow.livenessdataflow method)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow.set_gen_kill",false]],"set_gen_kill_in_block() (regalloc.livenessdataflow.livenessdataflow method)":[[22,"RegAlloc.LivenessDataFlow.LivenessDataFlow.set_gen_kill_in_block",false]],"set_phis() (lib.cfg.block method)":[[8,"Lib.CFG.Block.set_phis",false]],"set_start() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.set_start",false]],"set_temp_allocation() (lib.operands.temporarypool method)":[[14,"Lib.Operands.TemporaryPool.set_temp_allocation",false]],"set_terminator() (lib.cfg.block method)":[[8,"Lib.CFG.Block.set_terminator",false]],"smart_alloc() (regalloc.smartallocator.smartallocator method)":[[25,"RegAlloc.SmartAllocator.SmartAllocator.smart_alloc",false]],"smartallocator (class in regalloc.smartallocator)":[[25,"RegAlloc.SmartAllocator.SmartAllocator",false]],"sp (in module lib.operands)":[[14,"Lib.Operands.SP",false]],"srcs (lib.phinode.phinode attribute)":[[15,"Lib.PhiNode.PhiNode.srcs",false]],"statement (class in lib.statement)":[[17,"Lib.Statement.Statement",false]],"sub() (in module lib.riscv)":[[16,"Lib.RiscV.sub",false]],"substitute() (lib.statement.absolutejump method)":[[17,"Lib.Statement.AbsoluteJump.substitute",false]],"substitute() (lib.statement.conditionaljump method)":[[17,"Lib.Statement.ConditionalJump.substitute",false]],"substitute() (lib.statement.instru3a method)":[[17,"Lib.Statement.Instru3A.substitute",false]],"substitute() (lib.statement.statement method)":[[17,"Lib.Statement.Statement.substitute",false]],"substitute() (lib.terminator.branchingterminator method)":[[18,"Lib.Terminator.BranchingTerminator.substitute",false]],"substitute() (lib.terminator.return method)":[[18,"Lib.Terminator.Return.substitute",false]],"t (in module lib.operands)":[[14,"Lib.Operands.T",false]],"targets() (lib.statement.absolutejump method)":[[17,"Lib.Statement.AbsoluteJump.targets",false]],"targets() (lib.terminator.branchingterminator method)":[[18,"Lib.Terminator.BranchingTerminator.targets",false]],"targets() (lib.terminator.return method)":[[18,"Lib.Terminator.Return.targets",false]],"temporary (class in lib.operands)":[[14,"Lib.Operands.Temporary",false]],"temporarypool (class in lib.operands)":[[14,"Lib.Operands.TemporaryPool",false]],"terminator (in module lib.terminator)":[[18,"Lib.Terminator.Terminator",false]],"to_dot() (lib.cfg.block method)":[[8,"Lib.CFG.Block.to_dot",false]],"tp (in module lib.operands)":[[14,"Lib.Operands.TP",false]],"used() (lib.phinode.phinode method)":[[15,"Lib.PhiNode.PhiNode.used",false]],"used() (lib.statement.instruction method)":[[17,"Lib.Statement.Instruction.used",false]],"used() (lib.statement.statement method)":[[17,"Lib.Statement.Statement.used",false]],"var (lib.phinode.phinode attribute)":[[15,"Lib.PhiNode.PhiNode.var",false]],"vertices() (lib.graphes.generalgraph method)":[[12,"Lib.Graphes.GeneralGraph.vertices",false]],"visitadditiveexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAdditiveExpr",false]],"visitandexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAndExpr",false]],"visitarrayallocexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayAllocExpr",false]],"visitarrayreadexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayReadExpr",false]],"visitarraytype() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayType",false]],"visitarraywritestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayWriteStat",false]],"visitassignstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAssignStat",false]],"visitatomexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAtomExpr",false]],"visitbooleanatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitBooleanAtom",false]],"visitcontinuestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitContinueStat",false]],"visitequalityexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitEqualityExpr",false]],"visitexprlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitExprList",false]],"visitexprlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitExprListBase",false]],"visitfloatatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFloatAtom",false]],"visitforcstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitForCStat",false]],"visitforforstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitForForStat",false]],"visitfunccall() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFuncCall",false]],"visitfuncdef() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFuncDef",false]],"visitidatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdAtom",false]],"visitidlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdList",false]],"visitidlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdListBase",false]],"visitifstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIfStat",false]],"visitintatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIntAtom",false]],"visitmultiplicativeexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitMultiplicativeExpr",false]],"visitnotexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitNotExpr",false]],"visitorexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitOrExpr",false]],"visitparamdecl() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamDecl",false]],"visitparamlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamList",false]],"visitparamlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamListBase",false]],"visitparexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParExpr",false]],"visitprintlnboolstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnboolStat",false]],"visitprintlnfloatstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnfloatStat",false]],"visitprintlnintstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnintStat",false]],"visitprintlnstringstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnstringStat",false]],"visitprogrule() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitProgRule",false]],"visitrelationalexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitRelationalExpr",false]],"visitstatlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitStatList",false]],"visitstringatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitStringAtom",false]],"visitunaryminusexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitUnaryMinusExpr",false]],"visitvardecl() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitVarDecl",false]],"visitwhilestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitWhileStat",false]],"with_args() (lib.statement.absolutejump method)":[[17,"Lib.Statement.AbsoluteJump.with_args",false]],"with_args() (lib.statement.conditionaljump method)":[[17,"Lib.Statement.ConditionalJump.with_args",false]],"with_args() (lib.statement.instru3a method)":[[17,"Lib.Statement.Instru3A.with_args",false]],"with_args() (lib.statement.statement method)":[[17,"Lib.Statement.Statement.with_args",false]],"with_args() (lib.terminator.branchingterminator method)":[[18,"Lib.Terminator.BranchingTerminator.with_args",false]],"with_args() (lib.terminator.return method)":[[18,"Lib.Terminator.Return.with_args",false]],"xor() (in module lib.riscv)":[[16,"Lib.RiscV.xor",false]],"zero (in module lib.operands)":[[14,"Lib.Operands.ZERO",false]]},"objects":{"":[[0,0,0,"-","CodeGen"],[6,0,0,"-","Lib"],[19,0,0,"-","RegAlloc"]],"CodeGen":[[1,0,0,"-","AllInMemAllocator"],[2,0,0,"-","BuildCFG"],[3,0,0,"-","HybridNaiveAllocator"],[4,0,0,"-","LinearizeCFG"],[5,0,0,"-","MiniCCodeGen3AVisitor"]],"CodeGen.AllInMemAllocator":[[1,1,1,"","AllInMemAllocator"]],"CodeGen.AllInMemAllocator.AllInMemAllocator":[[1,2,1,"","prepare"],[1,2,1,"","replace"]],"CodeGen.BuildCFG":[[2,3,1,"","build_cfg"],[2,3,1,"","find_leaders"],[2,3,1,"","prepare_chunk"],[2,3,1,"","separate_with_leaders"]],"CodeGen.HybridNaiveAllocator":[[3,1,1,"","HybridNaiveAllocator"]],"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator":[[3,2,1,"","prepare"],[3,2,1,"","replace"]],"CodeGen.LinearizeCFG":[[4,3,1,"","linearize"],[4,3,1,"","ordered_blocks_list"]],"CodeGen.MiniCCodeGen3AVisitor":[[5,1,1,"","MiniCCodeGen3AVisitor"]],"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor":[[5,4,1,"","add_comment"],[5,4,1,"","add_instruction_PRINTLN_INT"],[5,4,1,"","add_statement"],[5,4,1,"","continue_label_stack"],[5,4,1,"","fresh_label"],[5,4,1,"","fresh_tmp"],[5,2,1,"","get_functions"],[5,4,1,"","get_label_div_by_zero"],[5,2,1,"","printSymbolTable"],[5,2,1,"","restore_regs"],[5,2,1,"","save_regs"],[5,2,1,"","visitAdditiveExpr"],[5,2,1,"","visitAndExpr"],[5,2,1,"","visitArrayAllocExpr"],[5,2,1,"","visitArrayReadExpr"],[5,2,1,"","visitArrayType"],[5,2,1,"","visitArrayWriteStat"],[5,2,1,"","visitAssignStat"],[5,2,1,"","visitAtomExpr"],[5,2,1,"","visitBooleanAtom"],[5,2,1,"","visitContinueStat"],[5,2,1,"","visitEqualityExpr"],[5,2,1,"","visitExprList"],[5,2,1,"","visitExprListBase"],[5,2,1,"","visitFloatAtom"],[5,2,1,"","visitForCStat"],[5,2,1,"","visitForForStat"],[5,2,1,"","visitFuncCall"],[5,2,1,"","visitFuncDef"],[5,2,1,"","visitIdAtom"],[5,2,1,"","visitIdList"],[5,2,1,"","visitIdListBase"],[5,2,1,"","visitIfStat"],[5,2,1,"","visitIntAtom"],[5,2,1,"","visitMultiplicativeExpr"],[5,2,1,"","visitNotExpr"],[5,2,1,"","visitOrExpr"],[5,2,1,"","visitParExpr"],[5,2,1,"","visitParamDecl"],[5,2,1,"","visitParamList"],[5,2,1,"","visitParamListBase"],[5,2,1,"","visitPrintlnboolStat"],[5,2,1,"","visitPrintlnfloatStat"],[5,2,1,"","visitPrintlnintStat"],[5,2,1,"","visitPrintlnstringStat"],[5,2,1,"","visitProgRule"],[5,2,1,"","visitRelationalExpr"],[5,2,1,"","visitStatList"],[5,2,1,"","visitStringAtom"],[5,2,1,"","visitUnaryMinusExpr"],[5,2,1,"","visitVarDecl"],[5,2,1,"","visitWhileStat"]],"Lib":[[7,0,0,"-","Allocator"],[8,0,0,"-","CFG"],[9,0,0,"-","Dominators"],[10,0,0,"-","Errors"],[11,0,0,"-","FunctionData"],[12,0,0,"-","Graphes"],[13,0,0,"-","LinearCode"],[14,0,0,"-","Operands"],[15,0,0,"-","PhiNode"],[16,0,0,"-","RiscV"],[17,0,0,"-","Statement"],[18,0,0,"-","Terminator"]],"Lib.Allocator":[[7,1,1,"","Allocator"],[7,1,1,"","NaiveAllocator"]],"Lib.Allocator.Allocator":[[7,2,1,"","prepare"],[7,2,1,"","replace"],[7,2,1,"","rewriteCode"]],"Lib.Allocator.NaiveAllocator":[[7,2,1,"","prepare"],[7,2,1,"","replace"]],"Lib.CFG":[[8,1,1,"","Block"],[8,1,1,"","CFG"]],"Lib.CFG.Block":[[8,2,1,"","add_instruction"],[8,2,1,"","add_phi"],[8,2,1,"","get_all_statements"],[8,2,1,"","get_body"],[8,2,1,"","get_body_and_terminator"],[8,2,1,"","get_in"],[8,2,1,"","get_label"],[8,2,1,"","get_phis"],[8,2,1,"","get_terminator"],[8,2,1,"","iter_statements"],[8,2,1,"","remove_all_phis"],[8,2,1,"","set_phis"],[8,2,1,"","set_terminator"],[8,2,1,"","to_dot"]],"Lib.CFG.CFG":[[8,2,1,"","add_block"],[8,2,1,"","add_edge"],[8,4,1,"","fdata"],[8,2,1,"","gather_defs"],[8,2,1,"","get_block"],[8,2,1,"","get_blocks"],[8,2,1,"","get_end"],[8,2,1,"","get_entries"],[8,2,1,"","get_start"],[8,2,1,"","iter_statements"],[8,2,1,"","linearize_naive"],[8,2,1,"","out_blocks"],[8,2,1,"","print_code"],[8,2,1,"","print_dot"],[8,2,1,"","remove_edge"],[8,2,1,"","set_start"]],"Lib.Dominators":[[9,3,1,"","computeDF"],[9,3,1,"","computeDT"],[9,3,1,"","computeDom"],[9,3,1,"","printDT"]],"Lib.Errors":[[10,5,1,"","AllocationError"],[10,5,1,"","MiniCInternalError"],[10,5,1,"","MiniCRuntimeError"],[10,5,1,"","MiniCTypeError"],[10,5,1,"","MiniCUnsupportedError"]],"Lib.FunctionData":[[11,1,1,"","FunctionData"]],"Lib.FunctionData.FunctionData":[[11,2,1,"","fresh_label"],[11,2,1,"","fresh_offset"],[11,2,1,"","fresh_tmp"],[11,2,1,"","get_label_div_by_zero"],[11,2,1,"","get_name"],[11,2,1,"","get_offset"]],"Lib.Graphes":[[12,1,1,"","DiGraph"],[12,1,1,"","GeneralGraph"],[12,1,1,"","Graph"],[12,5,1,"","GraphError"]],"Lib.Graphes.DiGraph":[[12,2,1,"","add_edge"],[12,2,1,"","delete_edge"],[12,2,1,"","delete_vertex"],[12,2,1,"","edges"],[12,2,1,"","neighbourhoods"],[12,2,1,"","pred"],[12,2,1,"","print_dot"]],"Lib.Graphes.GeneralGraph":[[12,2,1,"","add_vertex"],[12,2,1,"","bfs_traversal"],[12,2,1,"","connected_components"],[12,2,1,"","dfs_traversal"],[12,2,1,"","edges"],[12,4,1,"","graph_dict"],[12,2,1,"","is_reachable_from"],[12,2,1,"","vertices"]],"Lib.Graphes.Graph":[[12,2,1,"","add_edge"],[12,2,1,"","color"],[12,2,1,"","color_with_k_colors"],[12,2,1,"","delete_edge"],[12,2,1,"","delete_vertex"],[12,2,1,"","edges"],[12,2,1,"","print_dot"]],"Lib.Graphes.GraphError":[[12,4,1,"","message"]],"Lib.LinearCode":[[13,1,1,"","LinearCode"]],"Lib.LinearCode.LinearCode":[[13,2,1,"","add_comment"],[13,2,1,"","add_instruction_PRINTLN_INT"],[13,2,1,"","add_statement"],[13,4,1,"","fdata"],[13,2,1,"","get_instructions"],[13,2,1,"","iter_statements"],[13,2,1,"","print_code"],[13,2,1,"","print_dot"]],"Lib.Operands":[[14,6,1,"","A"],[14,6,1,"","A0"],[14,6,1,"","A1"],[14,1,1,"","Condition"],[14,1,1,"","DataLocation"],[14,6,1,"","FP"],[14,1,1,"","Function"],[14,6,1,"","GP"],[14,6,1,"","GP_REGS"],[14,1,1,"","Immediate"],[14,1,1,"","Offset"],[14,1,1,"","Operand"],[14,6,1,"","RA"],[14,1,1,"","Register"],[14,1,1,"","RegisterLike"],[14,1,1,"","Renamer"],[14,6,1,"","S"],[14,6,1,"","SP"],[14,6,1,"","T"],[14,6,1,"","TP"],[14,1,1,"","Temporary"],[14,1,1,"","TemporaryPool"],[14,6,1,"","ZERO"]],"Lib.Operands.Condition":[[14,2,1,"","negate"]],"Lib.Operands.Offset":[[14,2,1,"","get_offset"]],"Lib.Operands.Renamer":[[14,2,1,"","copy"],[14,2,1,"","defined"],[14,2,1,"","fresh"],[14,2,1,"","replace"]],"Lib.Operands.Temporary":[[14,2,1,"","get_alloced_loc"]],"Lib.Operands.TemporaryPool":[[14,2,1,"","add_tmp"],[14,2,1,"","fresh_tmp"],[14,2,1,"","get_all_temps"],[14,2,1,"","get_alloced_loc"],[14,2,1,"","set_temp_allocation"]],"Lib.PhiNode":[[15,1,1,"","PhiNode"]],"Lib.PhiNode.PhiNode":[[15,2,1,"","defined"],[15,2,1,"","get_srcs"],[15,2,1,"","printIns"],[15,2,1,"","rename"],[15,2,1,"","rename_from"],[15,4,1,"","srcs"],[15,2,1,"","used"],[15,4,1,"","var"]],"Lib.RiscV":[[16,3,1,"","add"],[16,3,1,"","call"],[16,3,1,"","conditional_jump"],[16,3,1,"","div"],[16,3,1,"","jump"],[16,3,1,"","land"],[16,3,1,"","ld"],[16,3,1,"","li"],[16,3,1,"","lor"],[16,3,1,"","mul"],[16,3,1,"","mv"],[16,3,1,"","rem"],[16,3,1,"","sd"],[16,3,1,"","sub"],[16,3,1,"","xor"]],"Lib.Statement":[[17,1,1,"","AbsoluteJump"],[17,1,1,"","Comment"],[17,1,1,"","ConditionalJump"],[17,1,1,"","Instru3A"],[17,1,1,"","Instruction"],[17,1,1,"","Label"],[17,1,1,"","Statement"],[17,3,1,"","regset_to_string"]],"Lib.Statement.AbsoluteJump":[[17,2,1,"","args"],[17,4,1,"","ins"],[17,4,1,"","label"],[17,2,1,"","rename"],[17,2,1,"","substitute"],[17,2,1,"","targets"],[17,2,1,"","with_args"]],"Lib.Statement.Comment":[[17,4,1,"","comment"],[17,2,1,"","printIns"]],"Lib.Statement.ConditionalJump":[[17,2,1,"","args"],[17,4,1,"","cond"],[17,4,1,"","label"],[17,4,1,"","op1"],[17,4,1,"","op2"],[17,2,1,"","rename"],[17,2,1,"","substitute"],[17,2,1,"","with_args"]],"Lib.Statement.Instru3A":[[17,2,1,"","args"],[17,2,1,"","rename"],[17,2,1,"","substitute"],[17,2,1,"","with_args"]],"Lib.Statement.Instruction":[[17,2,1,"","args"],[17,2,1,"","defined"],[17,4,1,"","ins"],[17,2,1,"","is_read_only"],[17,2,1,"","printIns"],[17,2,1,"","rename"],[17,2,1,"","used"]],"Lib.Statement.Label":[[17,4,1,"","name"],[17,2,1,"","printIns"]],"Lib.Statement.Statement":[[17,2,1,"","defined"],[17,2,1,"","printIns"],[17,2,1,"","substitute"],[17,2,1,"","used"],[17,2,1,"","with_args"]],"Lib.Terminator":[[18,1,1,"","BranchingTerminator"],[18,1,1,"","Return"],[18,6,1,"","Terminator"],[18,3,1,"","jump2terminator"]],"Lib.Terminator.BranchingTerminator":[[18,2,1,"","args"],[18,4,1,"","cond"],[18,4,1,"","label_else"],[18,4,1,"","label_then"],[18,4,1,"","op1"],[18,4,1,"","op2"],[18,2,1,"","rename"],[18,2,1,"","substitute"],[18,2,1,"","targets"],[18,2,1,"","with_args"]],"Lib.Terminator.Return":[[18,2,1,"","args"],[18,2,1,"","is_read_only"],[18,2,1,"","printIns"],[18,2,1,"","rename"],[18,2,1,"","substitute"],[18,2,1,"","targets"],[18,2,1,"","with_args"]],"RegAlloc":[[20,0,0,"-","EnterSSA"],[21,0,0,"-","ExitSSA"],[22,0,0,"-","LivenessDataFlow"],[23,0,0,"-","LivenessSSA"],[24,0,0,"-","SequentializeMoves"],[25,0,0,"-","SmartAllocator"]],"RegAlloc.EnterSSA":[[20,3,1,"","enter_ssa"],[20,3,1,"","insertPhis"],[20,3,1,"","rename_block"],[20,3,1,"","rename_variables"]],"RegAlloc.ExitSSA":[[21,3,1,"","exit_ssa"],[21,3,1,"","generate_moves_from_phis"],[21,3,1,"","generate_moves_from_phis_naive"]],"RegAlloc.LivenessDataFlow":[[22,1,1,"","LivenessDataFlow"]],"RegAlloc.LivenessDataFlow.LivenessDataFlow":[[22,2,1,"","dataflow_one_step"],[22,2,1,"","fill_liveout"],[22,2,1,"","print_gen_kill"],[22,2,1,"","print_map_in_out"],[22,2,1,"","run"],[22,2,1,"","run_dataflow_analysis"],[22,2,1,"","set_gen_kill"],[22,2,1,"","set_gen_kill_in_block"]],"RegAlloc.LivenessSSA":[[23,1,1,"","LivenessSSA"]],"RegAlloc.LivenessSSA.LivenessSSA":[[23,2,1,"","conflict_on_phis"],[23,2,1,"","gather_uses"],[23,2,1,"","livein_at_instruction"],[23,2,1,"","liveout_at_block"],[23,2,1,"","liveout_at_instruction"],[23,2,1,"","print_map_in_out"],[23,2,1,"","run"]],"RegAlloc.SequentializeMoves":[[24,3,1,"","generate_smart_move"],[24,3,1,"","generate_xor_move"],[24,3,1,"","sequentialize_moves"]],"RegAlloc.SmartAllocator":[[25,1,1,"","SmartAllocator"]],"RegAlloc.SmartAllocator.SmartAllocator":[[25,2,1,"","build_interference_graph"],[25,2,1,"","prepare"],[25,2,1,"","replace"],[25,2,1,"","smart_alloc"]]},"objnames":{"0":["py","module","Python module"],"1":["py","class","Python class"],"2":["py","method","Python method"],"3":["py","function","Python function"],"4":["py","attribute","Python attribute"],"5":["py","exception","Python exception"],"6":["py","data","Python data"]},"objtypes":{"0":"py:module","1":"py:class","2":"py:method","3":"py:function","4":"py:attribute","5":"py:exception","6":"py:data"},"terms":{"":[6,13,14,26],"0":[2,12,14],"1":[2,12],"3":[12,17,27],"4a":27,"5b":21,"A":[6,8,12,14,15,17,18,26,27],"And":16,"As":8,"At":[20,27],"For":[8,13],"If":[2,12],"In":17,"It":[9,14,17],"OR":[3,25],"Or":16,"The":[7,12,13,14,15,17,18,27],"Then":7,"There":18,"These":[15,27],"_blockin":22,"_blockout":22,"_debug_graph":25,"_gen":22,"_igraph":25,"_kill":22,"_liveout":23,"_name":2,"_phi":15,"_seen":23,"a0":[6,14,26,27],"a1":[6,14,26,27],"a2":14,"a3":14,"a4":14,"a5":14,"a6":14,"a7":14,"about":[8,27],"absolut":17,"absolutejump":[2,5,6,8,13,16,17,18,26,27],"accordingli":20,"actual":[1,3,7,12,14,25],"ad":[11,12],"add":[2,6,7,8,12,13,14,16,26,27],"add_block":[6,8,27],"add_com":[0,5,6,13,27],"add_edg":[6,8,12,27],"add_instruct":[6,8,27],"add_instruction_println_int":[0,5,6,13,27],"add_phi":[6,8,27],"add_stat":[0,5,6,13,27],"add_tmp":[6,14,27],"add_vertex":[6,12,27],"address":[14,17,27],"adjac":12,"after":7,"aka":16,"algo":12,"algorithm":9,"alia":18,"all":[1,3,7,8,12,14,25,27],"all_op":14,"allinmem":[3,7],"allinmemalloc":[0,26],"alloc":[1,3,6,13,14,21,24,25,26],"allocationerror":[6,10,26,27],"allow":[13,14,27],"also":[13,14],"an":[2,7,8,9,12,13,14,17,20,21,23,24,25],"analysi":[22,23,25],"ani":[8,12],"anoth":[18,23],"api":[13,16],"appear":[12,17,18,27],"appli":8,"ar":[7,11,12,14,15,17,18,23,24,25,27],"arg":[6,17,18,27],"argument":[14,27],"around":16,"asm":17,"assembli":27,"assign":7,"associ":[8,9,15,18,25],"assum":8,"auxiliari":20,"avoidingnod":12,"b":[15,20],"backward":23,"base":[1,3,5,7,8,10,11,12,13,14,15,17,18,22,23,25],"basenam":[9,20,25],"basereg":14,"basic":[8,27],"been":[14,17,18,25],"befor":[1,3,7,27],"begin":23,"being":12,"belong":12,"beq":[14,16],"better":9,"between":[2,12,21,25],"bfs_travers":[6,12,27],"bge":16,"bgt":16,"blk":8,"block":[2,4,6,8,9,15,18,20,21,22,23,26,27],"blockin":22,"blockout":22,"bodi":8,"bool":[9,12,14,18,21],"boolean":12,"both":[17,18],"branch":[8,14,17,18],"branchingtermin":[6,8,18,26,27],"breadth":12,"build":[13,14,18,21,25],"build_cfg":[0,2,26],"build_interference_graph":[19,25],"buildcfg":[0,26],"built":25,"c":[12,16],"call":[6,7,9,12,13,14,15,16,17,18,20,21,24,26,27],"callabl":5,"can":[1,3,8,14],"cannot":16,"cap":[2,4,13,16,18,20,21,24],"cfg":[2,4,6,9,15,18,20,21,23,24,26,27],"check":14,"children":9,"chunk":18,"class":[1,3,5,7,8,11,12,13,14,15,17,18,22,23,25,27],"clone":[17,18],"code":[2,7,8,13,16,27],"codegen":[13,26],"codegener":[2,4,13,16],"color":[6,12,25,27],"color_with_k_color":[6,12,27],"comment":[2,5,6,8,13,17,21,24,26,27],"common":11,"comparison":14,"complet":[8,13],"compon":12,"comput":[4,9,12,14,20,22,23,25],"computedf":[6,9,26,27],"computedom":[6,9,26,27],"computedt":[6,9,26,27],"concret":7,"cond":[6,16,17,18,27],"condit":[6,14,16,17,18,26,27],"conditional_jump":[6,16,26,27],"conditionaljump":[2,5,6,13,14,16,17,18,26,27],"conflict":[23,25],"conflict_on_phi":[19,23],"connect":12,"connected_compon":[6,12,27],"consid":[8,17],"constant":14,"construct":[2,18,25],"constructor":14,"contain":[2,8,11,13,15],"content":26,"continu":12,"continue_label_stack":[0,5],"control":[4,8],"convert":[20,21,24],"copi":[6,14,27],"correspond":[1,3,7,15,24,25],"cours":14,"creat":27,"ctx":5,"current":11,"cycl":24,"data":[7,14,27],"dataflow":[22,25],"dataflow_one_step":[19,22],"dataloc":[5,6,13,14,15,24,26,27],"debug":[5,13,22,23,25],"debug_graph":25,"decreas":11,"defin":[6,7,11,14,15,16,17,23,27],"definit":8,"delet":12,"delete_edg":[6,12,27],"delete_vertex":[6,12,27],"depend":24,"depth":12,"dest":[8,24],"destin":[17,18,24],"df":[8,9,13,20],"dfs_travers":[6,12,27],"dict":[8,9,12,14,15,17,18,20,23],"dictionari":[8,9,12],"dictionnari":[12,15,23],"differ":[11,12,14],"digraph":[6,12,26,27],"direct":12,"directli":27,"displai":9,"div":[6,16,26,27],"div_by_zero":11,"do":[2,9,12],"document":8,"dom_graph":[9,20],"domin":[6,20,26,27],"done":[7,12],"dr":16,"dt":[9,20],"due":16,"dure":[9,18,20,21,24],"e":[14,22],"each":[7,8,12,13,15,18,22,23,25,27],"easili":27,"edg":[6,8,12,25,27],"edit":27,"either":14,"element":2,"elimin":[20,21,24],"empti":[2,12],"enabl":21,"end":[2,18,23,27],"enforc":14,"ensur":23,"enter_ssa":[19,20,26],"enterssa":[19,26],"entri":[8,9,20],"eq":16,"equal":14,"equat":9,"error":[2,6,26,27],"even":12,"everywher":8,"exampl":14,"except":[8,10,12],"exclud":[2,8],"exist":25,"exit":[8,21,24],"exit_ssa":[19,21,26],"exitssa":[19,26],"expand":[1,3,13],"expect":[14,15],"explan":8,"extract":[2,18],"f":[8,13],"fail":[7,12],"fals":[8,13,18,20,22,23,25],"fdata":[1,2,3,6,7,8,11,13,25,27],"field":[15,22],"file":[7,11,13,14],"filenam":[8,9,13],"fill":23,"fill_liveout":[19,22],"final":[8,20],"find":2,"find_lead":[0,2,26],"first":[2,3,7,12,17,18],"fixpoint":22,"flow":[4,8],"folder":27,"form":[15,20,21,23,24],"found":8,"fp":[6,11,14,26,27],"frame":14,"fresh":[2,6,11,14,15,27],"fresh_label":[0,2,5,6,11,27],"fresh_offset":[6,11,27],"fresh_tmp":[0,5,6,11,14,27],"from":[2,7,12,14,17,18,20,22],"frontier":[9,20,27],"function":[6,8,9,11,13,14,16,17,18,20,21,22,24,26,27],"functiondata":[1,2,3,6,7,8,13,25,26,27],"further":8,"g":12,"gather_def":[6,8,27],"gather_us":[19,23],"gener":[7,12,13,14,24],"generalgraph":[6,12,26,27],"generate_moves_from_phi":[19,21,26],"generate_moves_from_phis_na":[19,21,26],"generate_smart_mov":[19,24,26],"generate_xor_mov":[19,24,26],"get":[9,14,22],"get_all_stat":[6,8,27],"get_all_temp":[6,14,27],"get_alloced_loc":[6,14,27],"get_block":[6,8,27],"get_bodi":[6,8,27],"get_body_and_termin":[6,8,27],"get_end":[6,8,27],"get_entri":[6,8,27],"get_funct":[0,5],"get_in":[6,8,27],"get_instruct":[6,13,27],"get_label":[6,8,27],"get_label_div_by_zero":[0,5,6,11,27],"get_nam":[6,11,27],"get_offset":[6,11,14,27],"get_phi":[6,8,27],"get_src":[6,15,27],"get_start":[6,8,27],"get_termin":[6,8,27],"give":[14,23,27],"given":[2,4,8,9,11,13,15,17,18],"gp":[6,14,26,27],"gp_reg":[6,14,26,27],"graph":[4,6,8,9,13,20,25,26],"graph_dict":[6,12,27],"grapherror":[6,12,26,27],"graphic":9,"group":23,"gt":14,"ha":[12,14],"handl":7,"have":[17,18,20,25,27],"helper":[9,20,21,24],"hesit":9,"how":12,"hybridnaivealloc":[0,26],"i":[2,7,8,9,11,12,13,14,15,16,17,18,20,21,22,23,24,25],"identifi":[8,15,23],"iff":25,"imm7":16,"immedi":[6,14,16,26,27],"implement":[7,27],"includ":[2,8],"inde":14,"index":27,"indic":[2,8,20],"indirectli":11,"individu":22,"inform":[13,22,23],"inherit":17,"ins":[6,17,27],"insert":[20,21],"insertphi":[19,20,26],"insid":[22,23],"inst":8,"instanc":[2,13],"instead":[2,27],"instr":8,"instrs_chunk":2,"instru3a":[2,5,6,8,13,16,17,21,24,26,27],"instruct":[1,2,3,4,6,7,8,13,16,17,18,21,22,23,24,25,26,27],"int":[2,5,11,12,14,23],"integ":[12,13,14],"interfer":25,"intermedi":11,"intro":[20,21,24],"invari":[1,3],"is_reachable_from":[6,12,27],"is_read_onli":[6,17,18,27],"is_smart":21,"iter":[7,8,13,22],"iter_stat":[6,7,8,13,27],"its":[8,9,14,15,17,23,27],"itself":[8,14],"j":[17,18],"jump":[2,6,8,16,17,18,26,27],"jump2termin":[6,18,26,27],"k":12,"kei":[12,14,17,18],"kind":[15,17,18,27],"lab":[21,27],"label":[2,5,6,8,11,13,15,16,17,18,26,27],"label_els":[6,18,27],"label_then":[6,18,27],"lambda":8,"land":[6,16,26,27],"last":[2,23],"later":14,"latter":23,"ld":[6,16,26,27],"leader":2,"len":2,"li":[6,16,26,27],"lib":[26,27],"librari":18,"like":[3,16,20],"lincod":2,"linear":[0,2,4,8,13,26],"linearcod":[2,5,6,7,11,18,26,27],"linearize_na":[6,8,27],"linearizecfg":[0,26],"link":15,"list":[1,2,3,4,5,7,8,12,13,14,15,17,18,21,24,25,27],"listcod":7,"live":[22,23,25],"livein_at_instruct":[19,23],"livenessdataflow":[19,26],"livenessssa":[19,26],"liveout_at_block":[19,23],"liveout_at_instruct":[19,23],"liveset":22,"load":24,"locat":[1,3,7,14,17,24,25],"look":[9,20],"loop":12,"lor":[6,16,26,27],"lower":14,"lt":14,"made":8,"main":8,"mainli":8,"make":27,"manag":14,"mani":7,"map":[7,14],"mark":18,"meant":22,"mem":16,"member":[8,13],"memori":[1,3,7,11,14,24,25,27],"messag":[6,12,27],"meta":13,"metadata":[8,11],"method":[12,14],"mif08":[16,18],"miniccodegen3avisitor":[0,26],"minicinternalerror":[6,10,26,27],"minicpars":[14,16],"minicruntimeerror":[6,10,26,27],"minictypeerror":[6,10,26,27],"minicunsupportederror":[6,10,26,27],"minicvisitor":5,"model":27,"modifi":7,"modul":[26,27],"modulo":16,"more":7,"move":[21,24],"mul":[6,16,26,27],"must":[14,25],"mv":[6,16,26,27],"naiv":[3,7,8,27],"naivealloc":[6,7,26,27],"name":[6,8,11,12,13,14,15,17,20,27],"na\u00efv":7,"need":[20,27],"negat":[6,14,27],"neighbourhood":[6,12,27],"never":[15,17,18],"new":[8,11,13,14,17,18,21],"new_arg":[17,18],"newlin":13,"next_label":18,"node":[8,12,15,20,21,27],"non":[12,17,18,27],"none":[1,2,3,5,7,8,9,12,13,14,15,17,18,20,21,22,23,25],"nor":8,"noth":12,"number":[12,14],"object":[7,8,11,12,13,14,17,22,23,27],"offset":[3,5,6,11,14,25,26,27],"often":27,"old_instr":[1,3,7,25],"one":[8,14,17,18,22,23],"onli":[12,17],"op1":[6,16,17,18,27],"op2":[6,16,17,18,27],"opdict":14,"oper":14,"operand":[1,3,6,7,11,15,16,17,18,24,25,26,27],"opposit":14,"optim":4,"optimis":[20,21,24],"optyp":14,"order":[4,7],"ordered_blocks_list":[0,4,26],"orient":[12,27],"origin":7,"other":[14,17],"otherwis":[12,17],"out":[21,22,23,24],"out_block":[6,8,27],"output":[8,13,15,17,18],"over":[7,8,13],"packag":26,"page":27,"pair":[12,24],"parallel":24,"parallel_mov":24,"parent":21,"parser":5,"part":8,"particular":15,"partit":2,"path":[12,13],"perform":25,"phi":[8,20,21,23,27],"phinod":[6,21,26,27],"physic":[3,14,25],"place":14,"po":23,"point":[8,20,27],"pointer":14,"pool":[11,14],"posit":[2,23],"possibli":7,"potenti":[2,18],"pre_chunk":2,"precondit":25,"pred":[6,12,27],"predecessor":[8,12,15],"prepar":[0,1,3,6,7,19,25,27],"preparatori":25,"prepare_chunk":[0,2,26],"present":27,"pretti":17,"previou":15,"previous":[7,9],"print":[8,12,13,15,17,18,20,22,23,25],"print_cod":[6,8,13,27],"print_dot":[6,8,12,13,27],"print_gen_kil":[19,22],"print_map_in_out":[19,22,23],"printdt":[6,9,26,27],"printin":[6,15,17,18,27],"printsymbolt":[0,5],"procedur":8,"produc":20,"prog":20,"program":13,"propag":[22,23],"pseudo":27,"purpos":[13,14],"python":[12,16,27],"r1":24,"r2":24,"ra":[6,14,26,27],"rais":[2,12],"rang":25,"read":17,"real":[8,13],"reg":13,"regalloc":26,"regist":[3,6,7,14,21,24,25,26,27],"registerlik":[6,14,16,17,18,26,27],"registerset":17,"regroup":12,"regset":5,"regset_to_str":[6,17,26,27],"regular":17,"rel":11,"relat":25,"relev":13,"rem":[6,16,26,27],"remaind":16,"remov":8,"remove_all_phi":[6,8,27],"remove_edg":[6,8,27],"renam":[6,14,15,17,18,20,26,27],"rename_block":[19,20,26],"rename_from":[6,15,27],"rename_vari":[19,20,26],"render":9,"repeatedli":13,"replac":[0,1,3,6,7,8,13,14,17,18,19,21,25,27],"repres":[8,24,27],"represent":[11,13],"respect":[2,24],"respons":7,"rest":2,"restore_reg":[0,5],"return":[2,6,7,8,9,11,12,13,14,15,17,18,23,24,26,27],"rewritecod":[6,7,27],"risc":27,"riscv":[6,8,11,13,14,15,17,24,26,27],"root":12,"run":[19,22,23],"run_dataflow_analysi":[19,22],"s1":[3,14],"s10":14,"s11":14,"s2":[1,3,14,24],"s3":[1,3,14],"s4":14,"s5":14,"s6":14,"s7":14,"s8":14,"s9":14,"save":14,"save_reg":[0,5],"sd":[6,16,26,27],"search":[12,27],"second":18,"see":[8,13],"self":[12,22,23,25],"separate_with_lead":[0,2,26],"sequenti":24,"sequentialize_mov":[19,24,26],"sequentializemov":[19,26],"set":[8,9,12,17,20,21,22,23,24],"set_gen_kil":[19,22],"set_gen_kill_in_block":[19,22],"set_phi":[6,8,27],"set_start":[6,8,27],"set_temp_alloc":[6,7,14,27],"set_termin":[6,8,27],"shall":14,"shortcut":14,"should":[7,12,15,17,18,27],"similar":12,"smart":[7,21,24,25],"smart_alloc":[19,25],"smartalloc":[19,26],"solv":9,"some":[7,11,13,27],"sourc":[1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,27],"sp":[6,14,26,27],"special":27,"specif":17,"specifi":18,"sr":16,"sr1":16,"sr2orimm7":16,"src":[6,8,15,24,27],"ssa":[9,15,20,21,23,24],"stack":11,"standard":27,"start":[2,8],"statement":[2,4,6,8,14,15,18,23,26,27],"static":12,"step":[7,25],"store":[1,3,7,11,24],"str":[5,8,9,11,12,13,14,17,25],"stream":[15,17,18],"string":[8,11,14],"sub":[6,16,26,27],"subclass":14,"submodul":26,"subst":[17,18],"substitut":[6,17,18,27],"succeed":12,"successor":[8,18],"swap":24,"system":9,"t":[6,14,26,27],"t0":14,"t1":14,"t2":14,"t3":14,"t4":14,"t5":14,"t6":14,"tabl":9,"take":[17,18,24,27],"target":[6,8,17,18,27],"temp_0":[15,20],"temp_i":15,"temp_n":[15,20],"temp_x":[15,20],"temporari":[1,3,5,6,7,11,13,14,23,24,25,26],"temporarypool":[6,7,11,14,26,27],"term":8,"termin":[6,8,23,26,27],"text":13,"than":[7,14],"thank":2,"thei":[7,12,25],"them":[2,27],"thi":[2,7,8,9,11,14,16,17,18,20,21,22,24],"those":27,"three":[8,18],"through":11,"tmp":24,"to_dot":[6,8,27],"too":7,"tp":[6,14,26,27],"transform":[7,20],"translat":27,"transpar":7,"tree":9,"true":[12,14,17,18,21,25],"try":7,"tstatement":17,"tupl":[2,5,12,23,24],"turn":17,"twice":12,"two":[7,12,18,24],"type":[14,18],"typic":14,"uncondit":16,"under":[15,23],"understand":[9,27],"undirect":12,"uniqu":[8,11],"unlik":18,"unlimit":12,"unspecifi":12,"until":22,"us":[1,2,3,6,9,11,12,14,15,17,18,20,22,23,24,27],"usabl":14,"usag":14,"usual":11,"util":[9,11,13,17],"v":[12,27],"v1":12,"v2":12,"val":14,"valu":[1,3,12,13,14,17,18],"var":[6,15,23,27],"variabl":[8,11,13,15,20,23],"variou":27,"veri":27,"vertex":12,"vertic":[6,12,25,27],"vetic":12,"via":25,"view":[8,13],"visitadditiveexpr":[0,5],"visitandexpr":[0,5],"visitarrayallocexpr":[0,5],"visitarrayreadexpr":[0,5],"visitarraytyp":[0,5],"visitarraywritestat":[0,5],"visitassignstat":[0,5],"visitatomexpr":[0,5],"visitbooleanatom":[0,5],"visitcontinuestat":[0,5],"visitequalityexpr":[0,5],"visitexprlist":[0,5],"visitexprlistbas":[0,5],"visitfloatatom":[0,5],"visitforcstat":[0,5],"visitforforstat":[0,5],"visitfunccal":[0,5],"visitfuncdef":[0,5],"visitidatom":[0,5],"visitidlist":[0,5],"visitidlistbas":[0,5],"visitifstat":[0,5],"visitintatom":[0,5],"visitmultiplicativeexpr":[0,5],"visitnotexpr":[0,5],"visitor":13,"visitorexpr":[0,5],"visitparamdecl":[0,5],"visitparamlist":[0,5],"visitparamlistbas":[0,5],"visitparexpr":[0,5],"visitprintlnboolstat":[0,5],"visitprintlnfloatstat":[0,5],"visitprintlnintstat":[0,5],"visitprintlnstringstat":[0,5],"visitprogrul":[0,5],"visitrelationalexpr":[0,5],"visitstatlist":[0,5],"visitstringatom":[0,5],"visitunaryminusexpr":[0,5],"visitvardecl":[0,5],"visitwhilestat":[0,5],"wa":18,"we":[11,12,14,20,27],"well":11,"when":21,"where":[7,12,14,17,18,20],"whether":24,"which":[9,11,14,17,24],"while":23,"whose":2,"with_arg":[6,17,18,27],"without":24,"won":27,"work":[9,11,27],"wrapper":16,"written":17,"xor":[6,16,24,26,27],"yet":14,"you":27,"zero":[6,14,26,27],"\u03c6":[8,15,20,23]},"titles":["CodeGen package","CodeGen.AllInMemAllocator module","CodeGen.BuildCFG module","CodeGen.HybridNaiveAllocator module","CodeGen.LinearizeCFG module","CodeGen.MiniCCodeGen3AVisitor module","Lib package","Lib.Allocator module","Lib.CFG module","Lib.Dominators module","Lib.Errors module","Lib.FunctionData module","Lib.Graphes module","Lib.LinearCode module","Lib.Operands module","Lib.PhiNode module","Lib.RiscV module","Lib.Statement module","Lib.Terminator module","RegAlloc package","RegAlloc.EnterSSA module","RegAlloc.ExitSSA module","RegAlloc.LivenessDataFlow module","RegAlloc.LivenessSSA module","RegAlloc.SequentializeMoves module","RegAlloc.SmartAllocator module","MiniC","Welcome to MiniC\u2019s documentation!"],"titleterms":{"":27,"allinmemalloc":1,"alloc":[7,27],"base":27,"buildcfg":2,"cfg":8,"codegen":[0,1,2,3,4,5],"content":[0,6,19,27],"control":27,"document":27,"domin":9,"enterssa":20,"error":10,"exitssa":21,"flow":27,"form":27,"functiondata":11,"graph":[12,27],"hybridnaivealloc":3,"indic":27,"intermedi":27,"lib":[6,7,8,9,10,11,12,13,14,15,16,17,18],"librari":27,"linear":27,"linearcod":13,"linearizecfg":4,"livenessdataflow":22,"livenessssa":23,"minic":[26,27],"miniccodegen3avisitor":5,"modul":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],"operand":14,"packag":[0,6,19],"phinod":15,"regalloc":[19,20,21,22,23,24,25],"represent":27,"riscv":16,"sequentializemov":24,"smartalloc":25,"ssa":27,"statement":17,"submodul":[0,6,19],"tabl":27,"temporari":27,"termin":18,"welcom":27}})