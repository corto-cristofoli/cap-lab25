Search.setIndex({"alltitles":{"Base library":[[24,"base-library"]],"CodeGen package":[[0,null]],"CodeGen.AllInMemAllocator module":[[1,null]],"CodeGen.BuildCFG module":[[2,null]],"CodeGen.HybridNaiveAllocator module":[[3,null]],"CodeGen.LinearizeCFG module":[[4,null]],"CodeGen.MiniCCodeGen3AVisitor module":[[5,null]],"Contents:":[[24,null]],"Control Flow Graph Intermediate representation":[[24,"control-flow-graph-intermediate-representation"]],"Indices and tables":[[24,"indices-and-tables"]],"Lib package":[[6,null]],"Lib.Allocator module":[[7,null]],"Lib.CFG module":[[8,null]],"Lib.Errors module":[[9,null]],"Lib.FunctionData module":[[10,null]],"Lib.LinearCode module":[[11,null]],"Lib.Operands module":[[12,null]],"Lib.RiscV module":[[13,null]],"Lib.Statement module":[[14,null]],"Lib.Terminator module":[[15,null]],"Linear Intermediate representation":[[24,"linear-intermediate-representation"]],"MiniC":[[23,null]],"Module contents":[[0,"module-CodeGen"],[6,"module-Lib"],[16,"module-RegAlloc"]],"RegAlloc package":[[16,null]],"RegAlloc.EnterSSA module":[[17,null]],"RegAlloc.ExitSSA module":[[18,null]],"RegAlloc.LivenessDataFlow module":[[19,null]],"RegAlloc.LivenessSSA module":[[20,null]],"RegAlloc.SequentializeMoves module":[[21,null]],"RegAlloc.SmartAllocator module":[[22,null]],"SSA form":[[24,"ssa-form"]],"Submodules":[[0,"submodules"],[6,"submodules"],[16,"submodules"]],"Temporary allocation":[[24,"temporary-allocation"]],"Welcome to MiniC\u2019s documentation!":[[24,null]]},"docnames":["api/CodeGen","api/CodeGen.AllInMemAllocator","api/CodeGen.BuildCFG","api/CodeGen.HybridNaiveAllocator","api/CodeGen.LinearizeCFG","api/CodeGen.MiniCCodeGen3AVisitor","api/Lib","api/Lib.Allocator","api/Lib.CFG","api/Lib.Errors","api/Lib.FunctionData","api/Lib.LinearCode","api/Lib.Operands","api/Lib.RiscV","api/Lib.Statement","api/Lib.Terminator","api/RegAlloc","api/RegAlloc.EnterSSA","api/RegAlloc.ExitSSA","api/RegAlloc.LivenessDataFlow","api/RegAlloc.LivenessSSA","api/RegAlloc.SequentializeMoves","api/RegAlloc.SmartAllocator","api/modules","index"],"envversion":{"sphinx":65,"sphinx.domains.c":3,"sphinx.domains.changeset":1,"sphinx.domains.citation":1,"sphinx.domains.cpp":9,"sphinx.domains.index":1,"sphinx.domains.javascript":3,"sphinx.domains.math":2,"sphinx.domains.python":4,"sphinx.domains.rst":2,"sphinx.domains.std":2,"sphinx.ext.viewcode":1},"filenames":["api/CodeGen.rst","api/CodeGen.AllInMemAllocator.rst","api/CodeGen.BuildCFG.rst","api/CodeGen.HybridNaiveAllocator.rst","api/CodeGen.LinearizeCFG.rst","api/CodeGen.MiniCCodeGen3AVisitor.rst","api/Lib.rst","api/Lib.Allocator.rst","api/Lib.CFG.rst","api/Lib.Errors.rst","api/Lib.FunctionData.rst","api/Lib.LinearCode.rst","api/Lib.Operands.rst","api/Lib.RiscV.rst","api/Lib.Statement.rst","api/Lib.Terminator.rst","api/RegAlloc.rst","api/RegAlloc.EnterSSA.rst","api/RegAlloc.ExitSSA.rst","api/RegAlloc.LivenessDataFlow.rst","api/RegAlloc.LivenessSSA.rst","api/RegAlloc.SequentializeMoves.rst","api/RegAlloc.SmartAllocator.rst","api/modules.rst","index.rst"],"indexentries":{"a (in module lib.operands)":[[12,"Lib.Operands.A",false]],"a0 (in module lib.operands)":[[12,"Lib.Operands.A0",false]],"a1 (in module lib.operands)":[[12,"Lib.Operands.A1",false]],"absolutejump (class in lib.statement)":[[14,"Lib.Statement.AbsoluteJump",false]],"add() (in module lib.riscv)":[[13,"Lib.RiscV.add",false]],"add_block() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.add_block",false]],"add_comment (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_comment",false]],"add_comment() (lib.linearcode.linearcode method)":[[11,"Lib.LinearCode.LinearCode.add_comment",false]],"add_edge() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.add_edge",false]],"add_instruction() (lib.cfg.block method)":[[8,"Lib.CFG.Block.add_instruction",false]],"add_instruction_println_int (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_instruction_PRINTLN_INT",false]],"add_instruction_println_int() (lib.linearcode.linearcode method)":[[11,"Lib.LinearCode.LinearCode.add_instruction_PRINTLN_INT",false]],"add_phi() (lib.cfg.block method)":[[8,"Lib.CFG.Block.add_phi",false]],"add_statement (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.add_statement",false]],"add_statement() (lib.linearcode.linearcode method)":[[11,"Lib.LinearCode.LinearCode.add_statement",false]],"add_tmp() (lib.operands.temporarypool method)":[[12,"Lib.Operands.TemporaryPool.add_tmp",false]],"allinmemallocator (class in codegen.allinmemallocator)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator",false]],"allocationerror":[[9,"Lib.Errors.AllocationError",false]],"allocator (class in lib.allocator)":[[7,"Lib.Allocator.Allocator",false]],"args() (lib.statement.absolutejump method)":[[14,"Lib.Statement.AbsoluteJump.args",false]],"args() (lib.statement.conditionaljump method)":[[14,"Lib.Statement.ConditionalJump.args",false]],"args() (lib.statement.instru3a method)":[[14,"Lib.Statement.Instru3A.args",false]],"args() (lib.statement.instruction method)":[[14,"Lib.Statement.Instruction.args",false]],"args() (lib.terminator.branchingterminator method)":[[15,"Lib.Terminator.BranchingTerminator.args",false]],"args() (lib.terminator.return method)":[[15,"Lib.Terminator.Return.args",false]],"block (class in lib.cfg)":[[8,"Lib.CFG.Block",false]],"branchingterminator (class in lib.terminator)":[[15,"Lib.Terminator.BranchingTerminator",false]],"build_cfg() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.build_cfg",false]],"build_interference_graph() (regalloc.smartallocator.smartallocator method)":[[22,"RegAlloc.SmartAllocator.SmartAllocator.build_interference_graph",false]],"call() (in module lib.riscv)":[[13,"Lib.RiscV.call",false]],"cfg (class in lib.cfg)":[[8,"Lib.CFG.CFG",false]],"codegen":[[0,"module-CodeGen",false]],"codegen.allinmemallocator":[[1,"module-CodeGen.AllInMemAllocator",false]],"codegen.buildcfg":[[2,"module-CodeGen.BuildCFG",false]],"codegen.hybridnaiveallocator":[[3,"module-CodeGen.HybridNaiveAllocator",false]],"codegen.linearizecfg":[[4,"module-CodeGen.LinearizeCFG",false]],"codegen.miniccodegen3avisitor":[[5,"module-CodeGen.MiniCCodeGen3AVisitor",false]],"comment (class in lib.statement)":[[14,"Lib.Statement.Comment",false]],"comment (lib.statement.comment attribute)":[[14,"Lib.Statement.Comment.comment",false]],"cond (lib.statement.conditionaljump attribute)":[[14,"Lib.Statement.ConditionalJump.cond",false]],"cond (lib.terminator.branchingterminator attribute)":[[15,"Lib.Terminator.BranchingTerminator.cond",false]],"condition (class in lib.operands)":[[12,"Lib.Operands.Condition",false]],"conditional_jump() (in module lib.riscv)":[[13,"Lib.RiscV.conditional_jump",false]],"conditionaljump (class in lib.statement)":[[14,"Lib.Statement.ConditionalJump",false]],"conflict_on_phis() (regalloc.livenessssa.livenessssa method)":[[20,"RegAlloc.LivenessSSA.LivenessSSA.conflict_on_phis",false]],"continue_label_stack (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.continue_label_stack",false]],"copy() (lib.operands.renamer method)":[[12,"Lib.Operands.Renamer.copy",false]],"dataflow_one_step() (regalloc.livenessdataflow.livenessdataflow method)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow.dataflow_one_step",false]],"datalocation (class in lib.operands)":[[12,"Lib.Operands.DataLocation",false]],"defined() (lib.operands.renamer method)":[[12,"Lib.Operands.Renamer.defined",false]],"defined() (lib.statement.instruction method)":[[14,"Lib.Statement.Instruction.defined",false]],"defined() (lib.statement.statement method)":[[14,"Lib.Statement.Statement.defined",false]],"div() (in module lib.riscv)":[[13,"Lib.RiscV.div",false]],"enter_ssa() (in module regalloc.enterssa)":[[17,"RegAlloc.EnterSSA.enter_ssa",false]],"exit_ssa() (in module regalloc.exitssa)":[[18,"RegAlloc.ExitSSA.exit_ssa",false]],"fdata (lib.cfg.cfg attribute)":[[8,"Lib.CFG.CFG.fdata",false]],"fdata (lib.linearcode.linearcode attribute)":[[11,"Lib.LinearCode.LinearCode.fdata",false]],"fill_liveout() (regalloc.livenessdataflow.livenessdataflow method)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow.fill_liveout",false]],"find_leaders() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.find_leaders",false]],"fp (in module lib.operands)":[[12,"Lib.Operands.FP",false]],"fresh() (lib.operands.renamer method)":[[12,"Lib.Operands.Renamer.fresh",false]],"fresh_label (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.fresh_label",false]],"fresh_label() (lib.functiondata.functiondata method)":[[10,"Lib.FunctionData.FunctionData.fresh_label",false]],"fresh_offset() (lib.functiondata.functiondata method)":[[10,"Lib.FunctionData.FunctionData.fresh_offset",false]],"fresh_tmp (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.fresh_tmp",false]],"fresh_tmp() (lib.functiondata.functiondata method)":[[10,"Lib.FunctionData.FunctionData.fresh_tmp",false]],"fresh_tmp() (lib.operands.temporarypool method)":[[12,"Lib.Operands.TemporaryPool.fresh_tmp",false]],"function (class in lib.operands)":[[12,"Lib.Operands.Function",false]],"functiondata (class in lib.functiondata)":[[10,"Lib.FunctionData.FunctionData",false]],"gather_defs() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.gather_defs",false]],"gather_uses() (regalloc.livenessssa.livenessssa method)":[[20,"RegAlloc.LivenessSSA.LivenessSSA.gather_uses",false]],"generate_moves_from_phis() (in module regalloc.exitssa)":[[18,"RegAlloc.ExitSSA.generate_moves_from_phis",false]],"generate_moves_from_phis_naive() (in module regalloc.exitssa)":[[18,"RegAlloc.ExitSSA.generate_moves_from_phis_naive",false]],"generate_smart_move() (in module regalloc.sequentializemoves)":[[21,"RegAlloc.SequentializeMoves.generate_smart_move",false]],"generate_xor_move() (in module regalloc.sequentializemoves)":[[21,"RegAlloc.SequentializeMoves.generate_xor_move",false]],"get_all_statements() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_all_statements",false]],"get_all_temps() (lib.operands.temporarypool method)":[[12,"Lib.Operands.TemporaryPool.get_all_temps",false]],"get_alloced_loc() (lib.operands.temporary method)":[[12,"Lib.Operands.Temporary.get_alloced_loc",false]],"get_alloced_loc() (lib.operands.temporarypool method)":[[12,"Lib.Operands.TemporaryPool.get_alloced_loc",false]],"get_block() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_block",false]],"get_blocks() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_blocks",false]],"get_body() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_body",false]],"get_body_and_terminator() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_body_and_terminator",false]],"get_end() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_end",false]],"get_entries() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_entries",false]],"get_functions() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.get_functions",false]],"get_in() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_in",false]],"get_instructions() (lib.linearcode.linearcode method)":[[11,"Lib.LinearCode.LinearCode.get_instructions",false]],"get_label() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_label",false]],"get_label_div_by_zero (codegen.miniccodegen3avisitor.miniccodegen3avisitor attribute)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.get_label_div_by_zero",false]],"get_label_div_by_zero() (lib.functiondata.functiondata method)":[[10,"Lib.FunctionData.FunctionData.get_label_div_by_zero",false]],"get_name() (lib.functiondata.functiondata method)":[[10,"Lib.FunctionData.FunctionData.get_name",false]],"get_offset() (lib.functiondata.functiondata method)":[[10,"Lib.FunctionData.FunctionData.get_offset",false]],"get_offset() (lib.operands.offset method)":[[12,"Lib.Operands.Offset.get_offset",false]],"get_phis() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_phis",false]],"get_start() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.get_start",false]],"get_terminator() (lib.cfg.block method)":[[8,"Lib.CFG.Block.get_terminator",false]],"gp (in module lib.operands)":[[12,"Lib.Operands.GP",false]],"gp_regs (in module lib.operands)":[[12,"Lib.Operands.GP_REGS",false]],"hybridnaiveallocator (class in codegen.hybridnaiveallocator)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator",false]],"immediate (class in lib.operands)":[[12,"Lib.Operands.Immediate",false]],"ins (lib.statement.absolutejump attribute)":[[14,"Lib.Statement.AbsoluteJump.ins",false]],"ins (lib.statement.instruction attribute)":[[14,"Lib.Statement.Instruction.ins",false]],"insertphis() (in module regalloc.enterssa)":[[17,"RegAlloc.EnterSSA.insertPhis",false]],"instru3a (class in lib.statement)":[[14,"Lib.Statement.Instru3A",false]],"instruction (class in lib.statement)":[[14,"Lib.Statement.Instruction",false]],"is_read_only() (lib.statement.instruction method)":[[14,"Lib.Statement.Instruction.is_read_only",false]],"is_read_only() (lib.terminator.return method)":[[15,"Lib.Terminator.Return.is_read_only",false]],"iter_statements() (lib.cfg.block method)":[[8,"Lib.CFG.Block.iter_statements",false]],"iter_statements() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.iter_statements",false]],"iter_statements() (lib.linearcode.linearcode method)":[[11,"Lib.LinearCode.LinearCode.iter_statements",false]],"jump() (in module lib.riscv)":[[13,"Lib.RiscV.jump",false]],"jump2terminator() (in module lib.terminator)":[[15,"Lib.Terminator.jump2terminator",false]],"label (class in lib.statement)":[[14,"Lib.Statement.Label",false]],"label (lib.statement.absolutejump attribute)":[[14,"Lib.Statement.AbsoluteJump.label",false]],"label (lib.statement.conditionaljump attribute)":[[14,"Lib.Statement.ConditionalJump.label",false]],"label_else (lib.terminator.branchingterminator attribute)":[[15,"Lib.Terminator.BranchingTerminator.label_else",false]],"label_then (lib.terminator.branchingterminator attribute)":[[15,"Lib.Terminator.BranchingTerminator.label_then",false]],"land() (in module lib.riscv)":[[13,"Lib.RiscV.land",false]],"ld() (in module lib.riscv)":[[13,"Lib.RiscV.ld",false]],"li() (in module lib.riscv)":[[13,"Lib.RiscV.li",false]],"lib":[[6,"module-Lib",false]],"lib.allocator":[[7,"module-Lib.Allocator",false]],"lib.cfg":[[8,"module-Lib.CFG",false]],"lib.errors":[[9,"module-Lib.Errors",false]],"lib.functiondata":[[10,"module-Lib.FunctionData",false]],"lib.linearcode":[[11,"module-Lib.LinearCode",false]],"lib.operands":[[12,"module-Lib.Operands",false]],"lib.riscv":[[13,"module-Lib.RiscV",false]],"lib.statement":[[14,"module-Lib.Statement",false]],"lib.terminator":[[15,"module-Lib.Terminator",false]],"linearcode (class in lib.linearcode)":[[11,"Lib.LinearCode.LinearCode",false]],"linearize() (in module codegen.linearizecfg)":[[4,"CodeGen.LinearizeCFG.linearize",false]],"linearize_naive() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.linearize_naive",false]],"livein_at_instruction() (regalloc.livenessssa.livenessssa method)":[[20,"RegAlloc.LivenessSSA.LivenessSSA.livein_at_instruction",false]],"livenessdataflow (class in regalloc.livenessdataflow)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow",false]],"livenessssa (class in regalloc.livenessssa)":[[20,"RegAlloc.LivenessSSA.LivenessSSA",false]],"liveout_at_block() (regalloc.livenessssa.livenessssa method)":[[20,"RegAlloc.LivenessSSA.LivenessSSA.liveout_at_block",false]],"liveout_at_instruction() (regalloc.livenessssa.livenessssa method)":[[20,"RegAlloc.LivenessSSA.LivenessSSA.liveout_at_instruction",false]],"lor() (in module lib.riscv)":[[13,"Lib.RiscV.lor",false]],"miniccodegen3avisitor (class in codegen.miniccodegen3avisitor)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor",false]],"minicinternalerror":[[9,"Lib.Errors.MiniCInternalError",false]],"minicruntimeerror":[[9,"Lib.Errors.MiniCRuntimeError",false]],"minictypeerror":[[9,"Lib.Errors.MiniCTypeError",false]],"minicunsupportederror":[[9,"Lib.Errors.MiniCUnsupportedError",false]],"module":[[0,"module-CodeGen",false],[1,"module-CodeGen.AllInMemAllocator",false],[2,"module-CodeGen.BuildCFG",false],[3,"module-CodeGen.HybridNaiveAllocator",false],[4,"module-CodeGen.LinearizeCFG",false],[5,"module-CodeGen.MiniCCodeGen3AVisitor",false],[6,"module-Lib",false],[7,"module-Lib.Allocator",false],[8,"module-Lib.CFG",false],[9,"module-Lib.Errors",false],[10,"module-Lib.FunctionData",false],[11,"module-Lib.LinearCode",false],[12,"module-Lib.Operands",false],[13,"module-Lib.RiscV",false],[14,"module-Lib.Statement",false],[15,"module-Lib.Terminator",false],[16,"module-RegAlloc",false],[17,"module-RegAlloc.EnterSSA",false],[18,"module-RegAlloc.ExitSSA",false],[19,"module-RegAlloc.LivenessDataFlow",false],[20,"module-RegAlloc.LivenessSSA",false],[21,"module-RegAlloc.SequentializeMoves",false],[22,"module-RegAlloc.SmartAllocator",false]],"mul() (in module lib.riscv)":[[13,"Lib.RiscV.mul",false]],"mv() (in module lib.riscv)":[[13,"Lib.RiscV.mv",false]],"naiveallocator (class in lib.allocator)":[[7,"Lib.Allocator.NaiveAllocator",false]],"name (lib.statement.label attribute)":[[14,"Lib.Statement.Label.name",false]],"negate() (lib.operands.condition method)":[[12,"Lib.Operands.Condition.negate",false]],"offset (class in lib.operands)":[[12,"Lib.Operands.Offset",false]],"op1 (lib.statement.conditionaljump attribute)":[[14,"Lib.Statement.ConditionalJump.op1",false]],"op1 (lib.terminator.branchingterminator attribute)":[[15,"Lib.Terminator.BranchingTerminator.op1",false]],"op2 (lib.statement.conditionaljump attribute)":[[14,"Lib.Statement.ConditionalJump.op2",false]],"op2 (lib.terminator.branchingterminator attribute)":[[15,"Lib.Terminator.BranchingTerminator.op2",false]],"operand (class in lib.operands)":[[12,"Lib.Operands.Operand",false]],"ordered_blocks_list() (in module codegen.linearizecfg)":[[4,"CodeGen.LinearizeCFG.ordered_blocks_list",false]],"out_blocks() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.out_blocks",false]],"prepare() (codegen.allinmemallocator.allinmemallocator method)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator.prepare",false]],"prepare() (codegen.hybridnaiveallocator.hybridnaiveallocator method)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator.prepare",false]],"prepare() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.prepare",false]],"prepare() (lib.allocator.naiveallocator method)":[[7,"Lib.Allocator.NaiveAllocator.prepare",false]],"prepare() (regalloc.smartallocator.smartallocator method)":[[22,"RegAlloc.SmartAllocator.SmartAllocator.prepare",false]],"prepare_chunk() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.prepare_chunk",false]],"print_code() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.print_code",false]],"print_code() (lib.linearcode.linearcode method)":[[11,"Lib.LinearCode.LinearCode.print_code",false]],"print_dot() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.print_dot",false]],"print_dot() (lib.linearcode.linearcode method)":[[11,"Lib.LinearCode.LinearCode.print_dot",false]],"print_gen_kill() (regalloc.livenessdataflow.livenessdataflow method)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow.print_gen_kill",false]],"print_map_in_out() (regalloc.livenessdataflow.livenessdataflow method)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow.print_map_in_out",false]],"print_map_in_out() (regalloc.livenessssa.livenessssa method)":[[20,"RegAlloc.LivenessSSA.LivenessSSA.print_map_in_out",false]],"printins() (lib.statement.comment method)":[[14,"Lib.Statement.Comment.printIns",false]],"printins() (lib.statement.instruction method)":[[14,"Lib.Statement.Instruction.printIns",false]],"printins() (lib.statement.label method)":[[14,"Lib.Statement.Label.printIns",false]],"printins() (lib.statement.statement method)":[[14,"Lib.Statement.Statement.printIns",false]],"printins() (lib.terminator.return method)":[[15,"Lib.Terminator.Return.printIns",false]],"printsymboltable() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.printSymbolTable",false]],"ra (in module lib.operands)":[[12,"Lib.Operands.RA",false]],"regalloc":[[16,"module-RegAlloc",false]],"regalloc.enterssa":[[17,"module-RegAlloc.EnterSSA",false]],"regalloc.exitssa":[[18,"module-RegAlloc.ExitSSA",false]],"regalloc.livenessdataflow":[[19,"module-RegAlloc.LivenessDataFlow",false]],"regalloc.livenessssa":[[20,"module-RegAlloc.LivenessSSA",false]],"regalloc.sequentializemoves":[[21,"module-RegAlloc.SequentializeMoves",false]],"regalloc.smartallocator":[[22,"module-RegAlloc.SmartAllocator",false]],"register (class in lib.operands)":[[12,"Lib.Operands.Register",false]],"registerlike (class in lib.operands)":[[12,"Lib.Operands.RegisterLike",false]],"regset_to_string() (in module lib.statement)":[[14,"Lib.Statement.regset_to_string",false]],"rem() (in module lib.riscv)":[[13,"Lib.RiscV.rem",false]],"remove_all_phis() (lib.cfg.block method)":[[8,"Lib.CFG.Block.remove_all_phis",false]],"remove_edge() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.remove_edge",false]],"rename() (lib.statement.absolutejump method)":[[14,"Lib.Statement.AbsoluteJump.rename",false]],"rename() (lib.statement.conditionaljump method)":[[14,"Lib.Statement.ConditionalJump.rename",false]],"rename() (lib.statement.instru3a method)":[[14,"Lib.Statement.Instru3A.rename",false]],"rename() (lib.statement.instruction method)":[[14,"Lib.Statement.Instruction.rename",false]],"rename() (lib.terminator.branchingterminator method)":[[15,"Lib.Terminator.BranchingTerminator.rename",false]],"rename() (lib.terminator.return method)":[[15,"Lib.Terminator.Return.rename",false]],"rename_block() (in module regalloc.enterssa)":[[17,"RegAlloc.EnterSSA.rename_block",false]],"rename_variables() (in module regalloc.enterssa)":[[17,"RegAlloc.EnterSSA.rename_variables",false]],"renamer (class in lib.operands)":[[12,"Lib.Operands.Renamer",false]],"replace() (codegen.allinmemallocator.allinmemallocator method)":[[1,"CodeGen.AllInMemAllocator.AllInMemAllocator.replace",false]],"replace() (codegen.hybridnaiveallocator.hybridnaiveallocator method)":[[3,"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator.replace",false]],"replace() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.replace",false]],"replace() (lib.allocator.naiveallocator method)":[[7,"Lib.Allocator.NaiveAllocator.replace",false]],"replace() (lib.operands.renamer method)":[[12,"Lib.Operands.Renamer.replace",false]],"replace() (regalloc.smartallocator.smartallocator method)":[[22,"RegAlloc.SmartAllocator.SmartAllocator.replace",false]],"restore_regs() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.restore_regs",false]],"return (class in lib.terminator)":[[15,"Lib.Terminator.Return",false]],"rewritecode() (lib.allocator.allocator method)":[[7,"Lib.Allocator.Allocator.rewriteCode",false]],"run() (regalloc.livenessdataflow.livenessdataflow method)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow.run",false]],"run() (regalloc.livenessssa.livenessssa method)":[[20,"RegAlloc.LivenessSSA.LivenessSSA.run",false]],"run_dataflow_analysis() (regalloc.livenessdataflow.livenessdataflow method)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow.run_dataflow_analysis",false]],"s (in module lib.operands)":[[12,"Lib.Operands.S",false]],"save_regs() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.save_regs",false]],"sd() (in module lib.riscv)":[[13,"Lib.RiscV.sd",false]],"separate_with_leaders() (in module codegen.buildcfg)":[[2,"CodeGen.BuildCFG.separate_with_leaders",false]],"sequentialize_moves() (in module regalloc.sequentializemoves)":[[21,"RegAlloc.SequentializeMoves.sequentialize_moves",false]],"set_gen_kill() (regalloc.livenessdataflow.livenessdataflow method)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow.set_gen_kill",false]],"set_gen_kill_in_block() (regalloc.livenessdataflow.livenessdataflow method)":[[19,"RegAlloc.LivenessDataFlow.LivenessDataFlow.set_gen_kill_in_block",false]],"set_phis() (lib.cfg.block method)":[[8,"Lib.CFG.Block.set_phis",false]],"set_start() (lib.cfg.cfg method)":[[8,"Lib.CFG.CFG.set_start",false]],"set_temp_allocation() (lib.operands.temporarypool method)":[[12,"Lib.Operands.TemporaryPool.set_temp_allocation",false]],"set_terminator() (lib.cfg.block method)":[[8,"Lib.CFG.Block.set_terminator",false]],"smart_alloc() (regalloc.smartallocator.smartallocator method)":[[22,"RegAlloc.SmartAllocator.SmartAllocator.smart_alloc",false]],"smartallocator (class in regalloc.smartallocator)":[[22,"RegAlloc.SmartAllocator.SmartAllocator",false]],"sp (in module lib.operands)":[[12,"Lib.Operands.SP",false]],"statement (class in lib.statement)":[[14,"Lib.Statement.Statement",false]],"sub() (in module lib.riscv)":[[13,"Lib.RiscV.sub",false]],"substitute() (lib.statement.absolutejump method)":[[14,"Lib.Statement.AbsoluteJump.substitute",false]],"substitute() (lib.statement.conditionaljump method)":[[14,"Lib.Statement.ConditionalJump.substitute",false]],"substitute() (lib.statement.instru3a method)":[[14,"Lib.Statement.Instru3A.substitute",false]],"substitute() (lib.statement.statement method)":[[14,"Lib.Statement.Statement.substitute",false]],"substitute() (lib.terminator.branchingterminator method)":[[15,"Lib.Terminator.BranchingTerminator.substitute",false]],"substitute() (lib.terminator.return method)":[[15,"Lib.Terminator.Return.substitute",false]],"t (in module lib.operands)":[[12,"Lib.Operands.T",false]],"targets() (lib.statement.absolutejump method)":[[14,"Lib.Statement.AbsoluteJump.targets",false]],"targets() (lib.terminator.branchingterminator method)":[[15,"Lib.Terminator.BranchingTerminator.targets",false]],"targets() (lib.terminator.return method)":[[15,"Lib.Terminator.Return.targets",false]],"temporary (class in lib.operands)":[[12,"Lib.Operands.Temporary",false]],"temporarypool (class in lib.operands)":[[12,"Lib.Operands.TemporaryPool",false]],"terminator (in module lib.terminator)":[[15,"Lib.Terminator.Terminator",false]],"to_dot() (lib.cfg.block method)":[[8,"Lib.CFG.Block.to_dot",false]],"tp (in module lib.operands)":[[12,"Lib.Operands.TP",false]],"used() (lib.statement.instruction method)":[[14,"Lib.Statement.Instruction.used",false]],"used() (lib.statement.statement method)":[[14,"Lib.Statement.Statement.used",false]],"visitadditiveexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAdditiveExpr",false]],"visitandexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAndExpr",false]],"visitarrayallocexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayAllocExpr",false]],"visitarrayreadexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayReadExpr",false]],"visitarraytype() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayType",false]],"visitarraywritestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitArrayWriteStat",false]],"visitassignstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAssignStat",false]],"visitatomexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitAtomExpr",false]],"visitbooleanatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitBooleanAtom",false]],"visitcontinuestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitContinueStat",false]],"visitequalityexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitEqualityExpr",false]],"visitexprlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitExprList",false]],"visitexprlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitExprListBase",false]],"visitfloatatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFloatAtom",false]],"visitforcstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitForCStat",false]],"visitforforstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitForForStat",false]],"visitfunccall() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFuncCall",false]],"visitfuncdef() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitFuncDef",false]],"visitidatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdAtom",false]],"visitidlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdList",false]],"visitidlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIdListBase",false]],"visitifstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIfStat",false]],"visitintatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitIntAtom",false]],"visitmultiplicativeexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitMultiplicativeExpr",false]],"visitnotexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitNotExpr",false]],"visitorexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitOrExpr",false]],"visitparamdecl() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamDecl",false]],"visitparamlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamList",false]],"visitparamlistbase() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParamListBase",false]],"visitparexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitParExpr",false]],"visitprintlnboolstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnboolStat",false]],"visitprintlnfloatstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnfloatStat",false]],"visitprintlnintstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnintStat",false]],"visitprintlnstringstat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitPrintlnstringStat",false]],"visitprogrule() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitProgRule",false]],"visitrelationalexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitRelationalExpr",false]],"visitstatlist() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitStatList",false]],"visitstringatom() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitStringAtom",false]],"visitunaryminusexpr() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitUnaryMinusExpr",false]],"visitvardecl() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitVarDecl",false]],"visitwhilestat() (codegen.miniccodegen3avisitor.miniccodegen3avisitor method)":[[5,"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor.visitWhileStat",false]],"with_args() (lib.statement.absolutejump method)":[[14,"Lib.Statement.AbsoluteJump.with_args",false]],"with_args() (lib.statement.conditionaljump method)":[[14,"Lib.Statement.ConditionalJump.with_args",false]],"with_args() (lib.statement.instru3a method)":[[14,"Lib.Statement.Instru3A.with_args",false]],"with_args() (lib.statement.statement method)":[[14,"Lib.Statement.Statement.with_args",false]],"with_args() (lib.terminator.branchingterminator method)":[[15,"Lib.Terminator.BranchingTerminator.with_args",false]],"with_args() (lib.terminator.return method)":[[15,"Lib.Terminator.Return.with_args",false]],"xor() (in module lib.riscv)":[[13,"Lib.RiscV.xor",false]],"zero (in module lib.operands)":[[12,"Lib.Operands.ZERO",false]]},"objects":{"":[[0,0,0,"-","CodeGen"],[6,0,0,"-","Lib"],[16,0,0,"-","RegAlloc"]],"CodeGen":[[1,0,0,"-","AllInMemAllocator"],[2,0,0,"-","BuildCFG"],[3,0,0,"-","HybridNaiveAllocator"],[4,0,0,"-","LinearizeCFG"],[5,0,0,"-","MiniCCodeGen3AVisitor"]],"CodeGen.AllInMemAllocator":[[1,1,1,"","AllInMemAllocator"]],"CodeGen.AllInMemAllocator.AllInMemAllocator":[[1,2,1,"","prepare"],[1,2,1,"","replace"]],"CodeGen.BuildCFG":[[2,3,1,"","build_cfg"],[2,3,1,"","find_leaders"],[2,3,1,"","prepare_chunk"],[2,3,1,"","separate_with_leaders"]],"CodeGen.HybridNaiveAllocator":[[3,1,1,"","HybridNaiveAllocator"]],"CodeGen.HybridNaiveAllocator.HybridNaiveAllocator":[[3,2,1,"","prepare"],[3,2,1,"","replace"]],"CodeGen.LinearizeCFG":[[4,3,1,"","linearize"],[4,3,1,"","ordered_blocks_list"]],"CodeGen.MiniCCodeGen3AVisitor":[[5,1,1,"","MiniCCodeGen3AVisitor"]],"CodeGen.MiniCCodeGen3AVisitor.MiniCCodeGen3AVisitor":[[5,4,1,"","add_comment"],[5,4,1,"","add_instruction_PRINTLN_INT"],[5,4,1,"","add_statement"],[5,4,1,"","continue_label_stack"],[5,4,1,"","fresh_label"],[5,4,1,"","fresh_tmp"],[5,2,1,"","get_functions"],[5,4,1,"","get_label_div_by_zero"],[5,2,1,"","printSymbolTable"],[5,2,1,"","restore_regs"],[5,2,1,"","save_regs"],[5,2,1,"","visitAdditiveExpr"],[5,2,1,"","visitAndExpr"],[5,2,1,"","visitArrayAllocExpr"],[5,2,1,"","visitArrayReadExpr"],[5,2,1,"","visitArrayType"],[5,2,1,"","visitArrayWriteStat"],[5,2,1,"","visitAssignStat"],[5,2,1,"","visitAtomExpr"],[5,2,1,"","visitBooleanAtom"],[5,2,1,"","visitContinueStat"],[5,2,1,"","visitEqualityExpr"],[5,2,1,"","visitExprList"],[5,2,1,"","visitExprListBase"],[5,2,1,"","visitFloatAtom"],[5,2,1,"","visitForCStat"],[5,2,1,"","visitForForStat"],[5,2,1,"","visitFuncCall"],[5,2,1,"","visitFuncDef"],[5,2,1,"","visitIdAtom"],[5,2,1,"","visitIdList"],[5,2,1,"","visitIdListBase"],[5,2,1,"","visitIfStat"],[5,2,1,"","visitIntAtom"],[5,2,1,"","visitMultiplicativeExpr"],[5,2,1,"","visitNotExpr"],[5,2,1,"","visitOrExpr"],[5,2,1,"","visitParExpr"],[5,2,1,"","visitParamDecl"],[5,2,1,"","visitParamList"],[5,2,1,"","visitParamListBase"],[5,2,1,"","visitPrintlnboolStat"],[5,2,1,"","visitPrintlnfloatStat"],[5,2,1,"","visitPrintlnintStat"],[5,2,1,"","visitPrintlnstringStat"],[5,2,1,"","visitProgRule"],[5,2,1,"","visitRelationalExpr"],[5,2,1,"","visitStatList"],[5,2,1,"","visitStringAtom"],[5,2,1,"","visitUnaryMinusExpr"],[5,2,1,"","visitVarDecl"],[5,2,1,"","visitWhileStat"]],"Lib":[[7,0,0,"-","Allocator"],[8,0,0,"-","CFG"],[9,0,0,"-","Errors"],[10,0,0,"-","FunctionData"],[11,0,0,"-","LinearCode"],[12,0,0,"-","Operands"],[13,0,0,"-","RiscV"],[14,0,0,"-","Statement"],[15,0,0,"-","Terminator"]],"Lib.Allocator":[[7,1,1,"","Allocator"],[7,1,1,"","NaiveAllocator"]],"Lib.Allocator.Allocator":[[7,2,1,"","prepare"],[7,2,1,"","replace"],[7,2,1,"","rewriteCode"]],"Lib.Allocator.NaiveAllocator":[[7,2,1,"","prepare"],[7,2,1,"","replace"]],"Lib.CFG":[[8,1,1,"","Block"],[8,1,1,"","CFG"]],"Lib.CFG.Block":[[8,2,1,"","add_instruction"],[8,2,1,"","add_phi"],[8,2,1,"","get_all_statements"],[8,2,1,"","get_body"],[8,2,1,"","get_body_and_terminator"],[8,2,1,"","get_in"],[8,2,1,"","get_label"],[8,2,1,"","get_phis"],[8,2,1,"","get_terminator"],[8,2,1,"","iter_statements"],[8,2,1,"","remove_all_phis"],[8,2,1,"","set_phis"],[8,2,1,"","set_terminator"],[8,2,1,"","to_dot"]],"Lib.CFG.CFG":[[8,2,1,"","add_block"],[8,2,1,"","add_edge"],[8,4,1,"","fdata"],[8,2,1,"","gather_defs"],[8,2,1,"","get_block"],[8,2,1,"","get_blocks"],[8,2,1,"","get_end"],[8,2,1,"","get_entries"],[8,2,1,"","get_start"],[8,2,1,"","iter_statements"],[8,2,1,"","linearize_naive"],[8,2,1,"","out_blocks"],[8,2,1,"","print_code"],[8,2,1,"","print_dot"],[8,2,1,"","remove_edge"],[8,2,1,"","set_start"]],"Lib.Errors":[[9,5,1,"","AllocationError"],[9,5,1,"","MiniCInternalError"],[9,5,1,"","MiniCRuntimeError"],[9,5,1,"","MiniCTypeError"],[9,5,1,"","MiniCUnsupportedError"]],"Lib.FunctionData":[[10,1,1,"","FunctionData"]],"Lib.FunctionData.FunctionData":[[10,2,1,"","fresh_label"],[10,2,1,"","fresh_offset"],[10,2,1,"","fresh_tmp"],[10,2,1,"","get_label_div_by_zero"],[10,2,1,"","get_name"],[10,2,1,"","get_offset"]],"Lib.LinearCode":[[11,1,1,"","LinearCode"]],"Lib.LinearCode.LinearCode":[[11,2,1,"","add_comment"],[11,2,1,"","add_instruction_PRINTLN_INT"],[11,2,1,"","add_statement"],[11,4,1,"","fdata"],[11,2,1,"","get_instructions"],[11,2,1,"","iter_statements"],[11,2,1,"","print_code"],[11,2,1,"","print_dot"]],"Lib.Operands":[[12,6,1,"","A"],[12,6,1,"","A0"],[12,6,1,"","A1"],[12,1,1,"","Condition"],[12,1,1,"","DataLocation"],[12,6,1,"","FP"],[12,1,1,"","Function"],[12,6,1,"","GP"],[12,6,1,"","GP_REGS"],[12,1,1,"","Immediate"],[12,1,1,"","Offset"],[12,1,1,"","Operand"],[12,6,1,"","RA"],[12,1,1,"","Register"],[12,1,1,"","RegisterLike"],[12,1,1,"","Renamer"],[12,6,1,"","S"],[12,6,1,"","SP"],[12,6,1,"","T"],[12,6,1,"","TP"],[12,1,1,"","Temporary"],[12,1,1,"","TemporaryPool"],[12,6,1,"","ZERO"]],"Lib.Operands.Condition":[[12,2,1,"","negate"]],"Lib.Operands.Offset":[[12,2,1,"","get_offset"]],"Lib.Operands.Renamer":[[12,2,1,"","copy"],[12,2,1,"","defined"],[12,2,1,"","fresh"],[12,2,1,"","replace"]],"Lib.Operands.Temporary":[[12,2,1,"","get_alloced_loc"]],"Lib.Operands.TemporaryPool":[[12,2,1,"","add_tmp"],[12,2,1,"","fresh_tmp"],[12,2,1,"","get_all_temps"],[12,2,1,"","get_alloced_loc"],[12,2,1,"","set_temp_allocation"]],"Lib.RiscV":[[13,3,1,"","add"],[13,3,1,"","call"],[13,3,1,"","conditional_jump"],[13,3,1,"","div"],[13,3,1,"","jump"],[13,3,1,"","land"],[13,3,1,"","ld"],[13,3,1,"","li"],[13,3,1,"","lor"],[13,3,1,"","mul"],[13,3,1,"","mv"],[13,3,1,"","rem"],[13,3,1,"","sd"],[13,3,1,"","sub"],[13,3,1,"","xor"]],"Lib.Statement":[[14,1,1,"","AbsoluteJump"],[14,1,1,"","Comment"],[14,1,1,"","ConditionalJump"],[14,1,1,"","Instru3A"],[14,1,1,"","Instruction"],[14,1,1,"","Label"],[14,1,1,"","Statement"],[14,3,1,"","regset_to_string"]],"Lib.Statement.AbsoluteJump":[[14,2,1,"","args"],[14,4,1,"","ins"],[14,4,1,"","label"],[14,2,1,"","rename"],[14,2,1,"","substitute"],[14,2,1,"","targets"],[14,2,1,"","with_args"]],"Lib.Statement.Comment":[[14,4,1,"","comment"],[14,2,1,"","printIns"]],"Lib.Statement.ConditionalJump":[[14,2,1,"","args"],[14,4,1,"","cond"],[14,4,1,"","label"],[14,4,1,"","op1"],[14,4,1,"","op2"],[14,2,1,"","rename"],[14,2,1,"","substitute"],[14,2,1,"","with_args"]],"Lib.Statement.Instru3A":[[14,2,1,"","args"],[14,2,1,"","rename"],[14,2,1,"","substitute"],[14,2,1,"","with_args"]],"Lib.Statement.Instruction":[[14,2,1,"","args"],[14,2,1,"","defined"],[14,4,1,"","ins"],[14,2,1,"","is_read_only"],[14,2,1,"","printIns"],[14,2,1,"","rename"],[14,2,1,"","used"]],"Lib.Statement.Label":[[14,4,1,"","name"],[14,2,1,"","printIns"]],"Lib.Statement.Statement":[[14,2,1,"","defined"],[14,2,1,"","printIns"],[14,2,1,"","substitute"],[14,2,1,"","used"],[14,2,1,"","with_args"]],"Lib.Terminator":[[15,1,1,"","BranchingTerminator"],[15,1,1,"","Return"],[15,6,1,"","Terminator"],[15,3,1,"","jump2terminator"]],"Lib.Terminator.BranchingTerminator":[[15,2,1,"","args"],[15,4,1,"","cond"],[15,4,1,"","label_else"],[15,4,1,"","label_then"],[15,4,1,"","op1"],[15,4,1,"","op2"],[15,2,1,"","rename"],[15,2,1,"","substitute"],[15,2,1,"","targets"],[15,2,1,"","with_args"]],"Lib.Terminator.Return":[[15,2,1,"","args"],[15,2,1,"","is_read_only"],[15,2,1,"","printIns"],[15,2,1,"","rename"],[15,2,1,"","substitute"],[15,2,1,"","targets"],[15,2,1,"","with_args"]],"RegAlloc":[[17,0,0,"-","EnterSSA"],[18,0,0,"-","ExitSSA"],[19,0,0,"-","LivenessDataFlow"],[20,0,0,"-","LivenessSSA"],[21,0,0,"-","SequentializeMoves"],[22,0,0,"-","SmartAllocator"]],"RegAlloc.EnterSSA":[[17,3,1,"","enter_ssa"],[17,3,1,"","insertPhis"],[17,3,1,"","rename_block"],[17,3,1,"","rename_variables"]],"RegAlloc.ExitSSA":[[18,3,1,"","exit_ssa"],[18,3,1,"","generate_moves_from_phis"],[18,3,1,"","generate_moves_from_phis_naive"]],"RegAlloc.LivenessDataFlow":[[19,1,1,"","LivenessDataFlow"]],"RegAlloc.LivenessDataFlow.LivenessDataFlow":[[19,2,1,"","dataflow_one_step"],[19,2,1,"","fill_liveout"],[19,2,1,"","print_gen_kill"],[19,2,1,"","print_map_in_out"],[19,2,1,"","run"],[19,2,1,"","run_dataflow_analysis"],[19,2,1,"","set_gen_kill"],[19,2,1,"","set_gen_kill_in_block"]],"RegAlloc.LivenessSSA":[[20,1,1,"","LivenessSSA"]],"RegAlloc.LivenessSSA.LivenessSSA":[[20,2,1,"","conflict_on_phis"],[20,2,1,"","gather_uses"],[20,2,1,"","livein_at_instruction"],[20,2,1,"","liveout_at_block"],[20,2,1,"","liveout_at_instruction"],[20,2,1,"","print_map_in_out"],[20,2,1,"","run"]],"RegAlloc.SequentializeMoves":[[21,3,1,"","generate_smart_move"],[21,3,1,"","generate_xor_move"],[21,3,1,"","sequentialize_moves"]],"RegAlloc.SmartAllocator":[[22,1,1,"","SmartAllocator"]],"RegAlloc.SmartAllocator.SmartAllocator":[[22,2,1,"","build_interference_graph"],[22,2,1,"","prepare"],[22,2,1,"","replace"],[22,2,1,"","smart_alloc"]]},"objnames":{"0":["py","module","Python module"],"1":["py","class","Python class"],"2":["py","method","Python method"],"3":["py","function","Python function"],"4":["py","attribute","Python attribute"],"5":["py","exception","Python exception"],"6":["py","data","Python data"]},"objtypes":{"0":"py:module","1":"py:class","2":"py:method","3":"py:function","4":"py:attribute","5":"py:exception","6":"py:data"},"terms":{"":[6,11,12,23],"0":[2,12],"1":2,"3":[14,24],"4a":24,"5b":18,"A":[6,8,12,14,15,23,24],"And":13,"As":8,"At":[17,24],"For":[8,11],"If":2,"In":14,"It":[12,14],"OR":[3,22],"Or":13,"The":[7,11,12,14,15,24],"Then":7,"There":15,"These":24,"_blockin":19,"_blockout":19,"_debug_graph":22,"_gen":19,"_igraph":22,"_kill":19,"_liveout":20,"_name":2,"_seen":20,"a0":[6,12,23,24],"a1":[6,12,23,24],"a2":12,"a3":12,"a4":12,"a5":12,"a6":12,"a7":12,"about":[8,24],"absolut":14,"absolutejump":[2,5,6,8,11,13,14,15,23,24],"accordingli":17,"actual":[1,3,7,12,22],"ad":10,"add":[2,6,7,8,11,12,13,23,24],"add_block":[6,8,24],"add_com":[0,5,6,11,24],"add_edg":[6,8,24],"add_instruct":[6,8,24],"add_instruction_println_int":[0,5,6,11,24],"add_phi":[6,8,24],"add_stat":[0,5,6,11,24],"add_tmp":[6,12,24],"address":[12,14,24],"after":7,"aka":13,"alia":15,"all":[1,3,7,8,12,22,24],"all_op":12,"allinmem":[3,7],"allinmemalloc":[0,23],"alloc":[1,3,6,11,12,18,21,22,23],"allocationerror":[6,9,23,24],"allow":[11,12,24],"also":[11,12],"an":[2,7,8,11,12,14,17,18,20,21,22],"analysi":[19,20,22],"ani":8,"anoth":[15,20],"api":[11,13,24],"appear":[14,15,24],"appli":8,"ar":[7,10,12,14,15,20,21,22,24],"arg":[6,14,15,24],"argument":[12,24],"around":13,"asm":14,"assembli":24,"assign":7,"associ":[8,15,22],"assum":8,"auxiliari":17,"b":17,"backward":20,"base":[1,3,5,7,8,9,10,11,12,14,15,19,20,22],"basenam":[17,22],"basereg":12,"basic":[8,24],"been":[12,14,15,22],"befor":[1,3,7,24],"begin":20,"beq":[12,13],"between":[2,18,22],"bge":13,"bgt":13,"blk":8,"block":[2,4,6,8,15,17,18,19,20,23,24],"blockin":19,"blockout":19,"bodi":8,"bool":[12,15,18],"both":[14,15],"branch":[8,12,14,15],"branchingtermin":[6,8,15,23,24],"build":[11,12,15,18,22],"build_cfg":[0,2,23],"build_interference_graph":[16,22],"buildcfg":[0,23],"built":22,"c":13,"call":[6,7,11,12,13,14,15,17,18,21,23,24],"callabl":5,"can":[1,3,8,12],"cannot":13,"cap":[2,4,11,13,15,17,18,21],"cfg":[2,4,6,15,17,18,20,21,23,24],"check":12,"chunk":15,"class":[1,3,5,7,8,10,11,12,14,15,19,20,22,24],"clone":[14,15],"code":[2,7,8,11,13,24],"codegen":[11,23],"codegener":[2,4,11,13],"color":22,"comment":[2,5,6,8,11,14,18,21,23,24],"common":10,"comparison":12,"complet":[8,11],"comput":[4,12,17,19,20,22],"concret":7,"cond":[6,13,14,15,24],"condit":[6,12,13,14,15,23,24],"conditional_jump":[6,13,23,24],"conditionaljump":[2,5,6,11,12,13,14,15,23,24],"conflict":[20,22],"conflict_on_phi":[16,20],"consid":[8,14],"constant":12,"construct":[2,15,22],"constructor":12,"contain":[2,8,10,11],"content":23,"continue_label_stack":[0,5],"control":[4,8],"convert":[17,18,21],"copi":[6,12,24],"correspond":[1,3,7,21,22],"cours":12,"creat":24,"ctx":5,"current":10,"cycl":21,"data":[7,12,24],"dataflow":[19,22],"dataflow_one_step":[16,19],"dataloc":[5,6,11,12,21,23,24],"debug":[5,11,19,20,22],"debug_graph":22,"decreas":10,"defin":[6,7,10,12,13,14,20,24],"definit":8,"depend":21,"dest":[8,21],"destin":[14,15,21],"df":[8,11,17],"dict":[8,12,14,15,17,20],"dictionari":8,"dictionnari":20,"differ":[10,12],"directli":24,"div":[6,13,23,24],"div_by_zero":10,"do":2,"document":8,"dom_graph":17,"domin":[17,24],"done":7,"dr":13,"dt":17,"due":13,"dure":[15,17,18,21],"e":[12,19],"each":[7,8,11,15,19,20,22,24],"easili":24,"edg":[8,22],"edit":24,"either":12,"element":2,"elimin":[17,18,21],"empti":2,"enabl":18,"end":[2,15,20,24],"enforc":12,"ensur":20,"enter_ssa":[16,17,23],"enterssa":[16,23],"entri":[8,17],"eq":13,"equal":12,"error":[2,6,23,24],"everywher":8,"exampl":12,"except":[8,9],"exclud":[2,8],"exist":22,"exit":[8,18,21],"exit_ssa":[16,18,23],"exitssa":[16,23],"expand":[1,3,11],"expect":12,"explan":8,"extract":[2,15],"f":[8,11],"fail":7,"fals":[8,11,15,17,19,20,22],"fdata":[1,2,3,6,7,8,10,11,22,24],"field":19,"file":[7,10,11,12],"filenam":[8,11],"fill":20,"fill_liveout":[16,19],"final":[8,17],"find":2,"find_lead":[0,2,23],"first":[2,3,7,14,15],"fixpoint":19,"flow":[4,8],"folder":24,"form":[17,18,20,21],"found":8,"fp":[6,10,12,23,24],"frame":12,"fresh":[2,6,10,12,24],"fresh_label":[0,2,5,6,10,24],"fresh_offset":[6,10,24],"fresh_tmp":[0,5,6,10,12,24],"from":[2,7,12,14,15,17,19],"frontier":[17,24],"function":[6,8,10,11,12,13,14,15,17,18,19,21,23,24],"functiondata":[1,2,3,6,7,8,11,22,23,24],"further":8,"gather_def":[6,8,24],"gather_us":[16,20],"gener":[7,11,12,21],"generate_moves_from_phi":[16,18,23],"generate_moves_from_phis_na":[16,18,23],"generate_smart_mov":[16,21,23],"generate_xor_mov":[16,21,23],"get":[12,19],"get_all_stat":[6,8,24],"get_all_temp":[6,12,24],"get_alloced_loc":[6,12,24],"get_block":[6,8,24],"get_bodi":[6,8,24],"get_body_and_termin":[6,8,24],"get_end":[6,8,24],"get_entri":[6,8,24],"get_funct":[0,5],"get_in":[6,8,24],"get_instruct":[6,11,24],"get_label":[6,8,24],"get_label_div_by_zero":[0,5,6,10,24],"get_nam":[6,10,24],"get_offset":[6,10,12,24],"get_phi":[6,8,24],"get_start":[6,8,24],"get_termin":[6,8,24],"give":[12,20,24],"given":[2,4,8,10,11,14,15],"gp":[6,12,23,24],"gp_reg":[6,12,23,24],"graph":[4,8,11,17,22],"group":20,"gt":12,"ha":12,"handl":7,"have":[14,15,17,22,24],"helper":[17,18,21],"hybridnaivealloc":[0,23],"i":[2,7,8,10,11,12,13,14,15,17,18,19,20,21,22],"identifi":[8,20],"iff":22,"imm7":13,"immedi":[6,12,13,23,24],"implement":[7,24],"includ":[2,8],"inde":12,"index":24,"indic":[2,8,17],"indirectli":10,"individu":19,"inform":[11,19,20],"inherit":14,"ins":[6,14,24],"insert":[17,18],"insertphi":[16,17,23],"insid":[19,20],"inst":8,"instanc":[2,11],"instead":[2,24],"instr":8,"instrs_chunk":2,"instru3a":[2,5,6,8,11,13,14,18,21,23,24],"instruct":[1,2,3,4,6,7,8,11,13,14,15,18,19,20,21,22,23,24],"int":[2,5,10,12,20],"integ":[11,12],"interfer":22,"intermedi":10,"intro":[17,18,21],"invari":[1,3],"is_read_onli":[6,14,15,24],"is_smart":18,"iter":[7,8,11,19],"iter_stat":[6,7,8,11,24],"its":[8,12,14,20,24],"itself":[8,12],"j":[14,15],"jump":[2,6,8,13,14,15,23,24],"jump2termin":[6,15,23,24],"kei":[12,14,15],"kind":[14,15,24],"lab":[18,24],"label":[2,5,6,8,10,11,13,14,15,23,24],"label_els":[6,15,24],"label_then":[6,15,24],"lambda":8,"land":[6,13,23,24],"last":[2,20],"later":12,"latter":20,"ld":[6,13,23,24],"leader":2,"len":2,"li":[6,13,23,24],"lib":[23,24],"librari":15,"like":[3,13,17],"lincod":2,"linear":[0,2,4,8,11,23],"linearcod":[2,5,6,7,10,15,23,24],"linearize_na":[6,8,24],"linearizecfg":[0,23],"list":[1,2,3,4,5,7,8,11,12,14,15,18,21,22,24],"listcod":7,"live":[19,20,22],"livein_at_instruct":[16,20],"livenessdataflow":[16,23],"livenessssa":[16,23],"liveout_at_block":[16,20],"liveout_at_instruct":[16,20],"liveset":19,"load":21,"locat":[1,3,7,12,14,21,22],"look":17,"lor":[6,13,23,24],"lower":12,"lt":12,"made":8,"main":8,"mainli":8,"make":24,"manag":12,"mani":7,"map":[7,12],"mark":15,"meant":19,"mem":13,"member":[8,11],"memori":[1,3,7,10,12,21,22,24],"meta":11,"metadata":[8,10],"method":12,"mif08":[13,15],"miniccodegen3avisitor":[0,23],"minicinternalerror":[6,9,23,24],"minicpars":[12,13],"minicruntimeerror":[6,9,23,24],"minictypeerror":[6,9,23,24],"minicunsupportederror":[6,9,23,24],"minicvisitor":5,"model":24,"modifi":7,"modul":[23,24],"modulo":13,"more":7,"move":[18,21],"mul":[6,13,23,24],"must":[12,22],"mv":[6,13,23,24],"naiv":[3,7,8,24],"naivealloc":[6,7,23,24],"name":[6,8,10,11,12,14,17,24],"na\u00efv":7,"need":[17,24],"negat":[6,12,24],"never":[14,15],"new":[8,10,11,12,14,15,18],"new_arg":[14,15],"newlin":11,"next_label":15,"node":[8,17,18,24],"non":[14,15,24],"none":[1,2,3,5,7,8,11,12,14,15,17,18,19,20,22],"nor":8,"number":12,"object":[7,8,10,11,12,14,19,20,24],"offset":[3,5,6,10,12,22,23,24],"often":24,"old_instr":[1,3,7,22],"one":[8,12,14,15,19,20],"onli":14,"op1":[6,13,14,15,24],"op2":[6,13,14,15,24],"opdict":12,"oper":12,"operand":[1,3,6,7,10,13,14,15,21,22,23,24],"opposit":12,"optim":4,"optimis":[17,18,21],"optyp":12,"order":[4,7],"ordered_blocks_list":[0,4,23],"orient":24,"origin":7,"other":[12,14],"otherwis":14,"out":[18,19,20,21],"out_block":[6,8,24],"output":[8,11,14,15],"over":[7,8,11],"packag":23,"page":24,"pair":21,"parallel":21,"parallel_mov":21,"parent":18,"parser":5,"part":8,"partit":2,"path":11,"perform":22,"phi":[8,17,18,20,24],"phinod":[18,24],"physic":[3,12,22],"place":12,"po":20,"point":[8,17,24],"pointer":12,"pool":[10,12],"posit":[2,20],"possibli":7,"potenti":[2,15],"pre_chunk":2,"precondit":22,"predecessor":8,"prepar":[0,1,3,6,7,16,22,24],"preparatori":22,"prepare_chunk":[0,2,23],"present":24,"pretti":14,"previous":7,"print":[8,11,14,15,17,19,20,22],"print_cod":[6,8,11,24],"print_dot":[6,8,11,24],"print_gen_kil":[16,19],"print_map_in_out":[16,19,20],"printin":[6,14,15,24],"printsymbolt":[0,5],"procedur":8,"produc":17,"prog":17,"program":11,"propag":[19,20],"pseudo":24,"purpos":[11,12],"python":[13,24],"r1":21,"r2":21,"ra":[6,12,23,24],"rais":2,"rang":22,"read":14,"real":[8,11],"reg":11,"regalloc":23,"regist":[3,6,7,12,18,21,22,23,24],"registerlik":[6,12,13,14,15,23,24],"registerset":14,"regset":5,"regset_to_str":[6,14,23,24],"regular":14,"rel":10,"relat":22,"relev":11,"rem":[6,13,23,24],"remaind":13,"remov":8,"remove_all_phi":[6,8,24],"remove_edg":[6,8,24],"renam":[6,12,14,15,17,23,24],"rename_block":[16,17,23],"rename_vari":[16,17,23],"repeatedli":11,"replac":[0,1,3,6,7,8,11,12,14,15,16,18,22,24],"repres":[8,21,24],"represent":[10,11],"respect":[2,21],"respons":7,"rest":2,"restore_reg":[0,5],"return":[2,6,7,8,10,11,12,14,15,20,21,23,24],"rewritecod":[6,7,24],"risc":24,"riscv":[6,8,10,11,12,14,21,23,24],"run":[16,19,20],"run_dataflow_analysi":[16,19],"s1":[3,12],"s10":12,"s11":12,"s2":[1,3,12,21],"s3":[1,3,12],"s4":12,"s5":12,"s6":12,"s7":12,"s8":12,"s9":12,"save":12,"save_reg":[0,5],"sd":[6,13,23,24],"search":24,"second":15,"see":[8,11],"self":[19,20,22],"separate_with_lead":[0,2,23],"sequenti":21,"sequentialize_mov":[16,21,23],"sequentializemov":[16,23],"set":[8,14,17,18,19,20,21],"set_gen_kil":[16,19],"set_gen_kill_in_block":[16,19],"set_phi":[6,8,24],"set_start":[6,8,24],"set_temp_alloc":[6,7,12,24],"set_termin":[6,8,24],"shall":12,"shortcut":12,"should":[7,14,15,24],"smart":[7,18,21,22],"smart_alloc":[16,22],"smartalloc":[16,23],"some":[7,10,11,24],"sourc":[1,2,3,4,5,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,24],"sp":[6,12,23,24],"special":24,"specif":14,"specifi":15,"sr":13,"sr1":13,"sr2orimm7":13,"src":[8,21],"ssa":[17,18,20,21],"stack":10,"standard":24,"start":[2,8],"statement":[2,4,6,8,12,15,20,23,24],"step":[7,22],"store":[1,3,7,10,21],"str":[5,8,10,11,12,14,22],"stream":[14,15],"string":[8,10,12],"sub":[6,13,23,24],"subclass":12,"submodul":23,"subst":[14,15],"substitut":[6,14,15,24],"successor":[8,15],"swap":21,"t":[6,12,23,24],"t0":12,"t1":12,"t2":12,"t3":12,"t4":12,"t5":12,"t6":12,"take":[14,15,21,24],"target":[6,8,14,15,24],"temp_0":17,"temp_n":17,"temp_x":17,"temporari":[1,3,5,6,7,10,11,12,20,21,22,23],"temporarypool":[6,7,10,12,23,24],"term":8,"termin":[6,8,20,23,24],"text":11,"than":[7,12],"thank":2,"thei":[7,22],"them":[2,24],"thi":[2,7,8,10,12,13,14,15,17,18,19,21],"those":24,"three":[8,15],"through":10,"tmp":21,"to_dot":[6,8,24],"too":7,"tp":[6,12,23,24],"transform":[7,17],"translat":24,"transpar":7,"true":[12,14,15,18,22],"try":7,"tstatement":14,"tupl":[2,5,20,21],"turn":14,"two":[7,15,21],"type":[12,15],"typic":12,"uncondit":13,"under":20,"understand":24,"uniqu":[8,10],"unlik":15,"until":19,"us":[1,2,3,6,10,12,14,15,17,19,20,21,24],"usabl":12,"usag":12,"usual":10,"util":[10,11,14],"v":24,"val":12,"valu":[1,3,11,12,14,15],"var":20,"variabl":[8,10,11,17,20],"variou":24,"veri":24,"vertic":22,"via":22,"view":[8,11],"visitadditiveexpr":[0,5],"visitandexpr":[0,5],"visitarrayallocexpr":[0,5],"visitarrayreadexpr":[0,5],"visitarraytyp":[0,5],"visitarraywritestat":[0,5],"visitassignstat":[0,5],"visitatomexpr":[0,5],"visitbooleanatom":[0,5],"visitcontinuestat":[0,5],"visitequalityexpr":[0,5],"visitexprlist":[0,5],"visitexprlistbas":[0,5],"visitfloatatom":[0,5],"visitforcstat":[0,5],"visitforforstat":[0,5],"visitfunccal":[0,5],"visitfuncdef":[0,5],"visitidatom":[0,5],"visitidlist":[0,5],"visitidlistbas":[0,5],"visitifstat":[0,5],"visitintatom":[0,5],"visitmultiplicativeexpr":[0,5],"visitnotexpr":[0,5],"visitor":11,"visitorexpr":[0,5],"visitparamdecl":[0,5],"visitparamlist":[0,5],"visitparamlistbas":[0,5],"visitparexpr":[0,5],"visitprintlnboolstat":[0,5],"visitprintlnfloatstat":[0,5],"visitprintlnintstat":[0,5],"visitprintlnstringstat":[0,5],"visitprogrul":[0,5],"visitrelationalexpr":[0,5],"visitstatlist":[0,5],"visitstringatom":[0,5],"visitunaryminusexpr":[0,5],"visitvardecl":[0,5],"visitwhilestat":[0,5],"wa":15,"we":[10,12,17,24],"well":10,"when":18,"where":[7,12,14,15,17],"whether":21,"which":[10,12,14,21],"while":20,"whose":2,"with_arg":[6,14,15,24],"without":21,"won":24,"work":[10,24],"wrapper":13,"written":14,"xor":[6,13,21,23,24],"yet":12,"you":24,"zero":[6,12,23,24],"\u03c6":[8,17,20]},"titles":["CodeGen package","CodeGen.AllInMemAllocator module","CodeGen.BuildCFG module","CodeGen.HybridNaiveAllocator module","CodeGen.LinearizeCFG module","CodeGen.MiniCCodeGen3AVisitor module","Lib package","Lib.Allocator module","Lib.CFG module","Lib.Errors module","Lib.FunctionData module","Lib.LinearCode module","Lib.Operands module","Lib.RiscV module","Lib.Statement module","Lib.Terminator module","RegAlloc package","RegAlloc.EnterSSA module","RegAlloc.ExitSSA module","RegAlloc.LivenessDataFlow module","RegAlloc.LivenessSSA module","RegAlloc.SequentializeMoves module","RegAlloc.SmartAllocator module","MiniC","Welcome to MiniC\u2019s documentation!"],"titleterms":{"":24,"allinmemalloc":1,"alloc":[7,24],"base":24,"buildcfg":2,"cfg":8,"codegen":[0,1,2,3,4,5],"content":[0,6,16,24],"control":24,"document":24,"enterssa":17,"error":9,"exitssa":18,"flow":24,"form":24,"functiondata":10,"graph":24,"hybridnaivealloc":3,"indic":24,"intermedi":24,"lib":[6,7,8,9,10,11,12,13,14,15],"librari":24,"linear":24,"linearcod":11,"linearizecfg":4,"livenessdataflow":19,"livenessssa":20,"minic":[23,24],"miniccodegen3avisitor":5,"modul":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"operand":12,"packag":[0,6,16],"regalloc":[16,17,18,19,20,21,22],"represent":24,"riscv":13,"sequentializemov":21,"smartalloc":22,"ssa":24,"statement":14,"submodul":[0,6,16],"tabl":24,"temporari":24,"termin":15,"welcom":24}})